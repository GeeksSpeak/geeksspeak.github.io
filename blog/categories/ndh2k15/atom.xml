<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ndh2k15 | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/ndh2k15/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-05-18T14:02:55+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Weshgrow Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-weshgrow-writeup/"/>
    <updated>2015-04-06T16:58:41+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-weshgrow-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Weshgrow Writeup</strong><br/>
<strong>Point = 300</strong><br/>
<strong>Category = Crypto</strong></p>

<p>By openning the url we redirected to following link:</p>

<blockquote><p><a href="http://weshgrow.challs.nuitduhack.com/?hmac=ca8473d35a80a5ca4e9f3555c2869f71">http://weshgrow.challs.nuitduhack.com/?hmac=ca8473d35a80a5ca4e9f3555c2869f71</a></p></blockquote>

<p>As we know HMAC is a cryptographic message for authenticating using a secret key. So this has been made of something.</p>

<p>Also we could find another HMAC in the page source as you can see:</p>

<blockquote><p><a href="http://weshgrow.challs.nuitduhack.com/admin?hmac=fac0887096a54ac497d968daf4c4fe0b">http://weshgrow.challs.nuitduhack.com/admin?hmac=fac0887096a54ac497d968daf4c4fe0b</a></p></blockquote>

<p>if you open the /flag address without the purposed HMAC you see redirection to <code>address+"#missinghmac"</code>.</p>

<p>So this could be HMAC of pages and we should prepare a HMAC for <code>flag</code>.</p>

<!--more-->


<p>By going further into login page, we noticed after submiting the form, HMAC of the password sent to the page not the password itself. it used BHE class in <code>bhe.js</code> as mentioned &ldquo;Best Hash Ever&rdquo;.</p>

<pre><code>var BestHashEver = function() {
    this.state = [
        str2bigInt('1336226589', 10),
        str2bigInt('251977347', 10),
        str2bigInt('716107527', 10),
        str2bigInt('1774966033', 10),
    ];
};
BestHashEver.prototype.bhe_round = function(byte) {
    var c = str2bigInt('162888806', 10);
    console.log(c);
    for (var i=3; i&gt;0; i--) {
        this.state[i] = mod(add(mult(this.state[0], this.state[i]), mult(this.state[0], int2bigInt(byte, 10))), str2bigInt('4294967295', 10));
        console.log(this.state[i]);
    }
    this.state[0] = mod(add(mult(this.state[0], c), mult(this.state[1], int2bigInt(byte, 10))), str2bigInt('4294967295', 10));
};
BestHashEver.prototype.dword2hex = function(dw) {
    var hexchars = ["0", "1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
    var output = '';
    var c1 = '', c2=''
    for (var i = 0; i &lt; 4; i++) {
        byte = dw &amp; 0x0000000F;
        c1 = hexchars[byte];
        dw = (dw &gt;&gt; 4);
        byte = dw &amp; 0x0000000F;
        c2 = hexchars[byte];
        dw = (dw &gt;&gt; 4);
        output = output + c2 + c1;
    }
    console.log(output);
    return output;
};
BestHashEver.prototype.hash = function(data) {
    for (var i = 0; i &lt; data.length; i++){
        this.bhe_round(data.charCodeAt(i));
        console.log(this.state);
    }
    /* Generate output. */
    var digest = [
        parseInt(bigInt2str(this.state[0], 10)),
        parseInt(bigInt2str(this.state[1], 10)),
        parseInt(bigInt2str(this.state[2], 10)),
        parseInt(bigInt2str(this.state[3], 10)),
    ];
    return this.dword2hex(digest[0]) + this.dword2hex(digest[1]) + this.dword2hex(digest[2]) +
    this.dword2hex(digest[3]);
};
function hmac(data) {
    _bhe = new BestHashEver();
    return _bhe.hash(data);
}
</code></pre>

<p>The Hash like md5 has four state variables and multiple rounds which in each round based on previous values and variables, formulas generate a new state variables and change them. Also it has four initialize state value as default.</p>

<p>In this Algorithm each round is for every character of inputs which at the end output produced by hex and concatenation of final state variable.</p>

<p>But there are some flaw in the algorithm such as not using length of input and &hellip;</p>

<p>This means if we know the state variable value for some string <code>s</code>, we can continue the rounds and produce the output of <code>s+x</code> for any <code>x</code>. this attack mentioned as <code>hash length extension attack</code>.</p>

<p>It&rsquo;s obvious that we can obtain state variable&#8217; value from HASH(s). The reader should notice that in the <code>bhe.js</code> <strong>Big Endian byte order</strong> has been used.</p>

<p>So we have:</p>

<pre><code>Hash(s+x, default initialize state value) = Hash(s, state value of hash(s))
</code></pre>

<p>based on what discussed earlier and some knowledge about HMAC our scenario is:</p>

<pre><code>HMAC(message)= Hash(secret + message)
</code></pre>

<p>which page name will be used as <code>message</code>. As you saw we have valid HMAC for empty(NULL) page name, so:</p>

<pre><code>HMAC("") = Hash(secret)

HMAC("flag") = Hash(s, state value of HMAC(""))
</code></pre>

<p>In order to obtain the proper HMAC i wrote a python script but it can be done by changing default value in js too.</p>

<pre><code>def convert2be(s):#convert to big endian byte order
    return s[6:8]+s[4:6]+s[2:4]+s[0:2]

def myhex(s):
    return convert2be(hex(s)[2:-1].rjust(8,'0'))

def hash(inp,state=[1336226589,251977347,716107527,1774966033]):
    a,b,c,d=state[0],state[1],state[2],state[3]
    m=4294967295
    for x in inp:
        x=ord(x)
        aa=(a*(162888806+x*(b+x)))%m
        bb=(a*(b+x))%m
        cc=(a*(c+x))%m
        dd=(a*(d+x))%m
        a,b,c,d=aa,bb,cc,dd
    return myhex(a)+myhex(b)+myhex(c)+myhex(d)

emptyhmac="ca8473d35a80a5ca4e9f3555c2869f71" #hmac("")

import re
emptystate=map(lambda x:int(convert2be(x),16),re.findall('.'*8,emptyhmac))

print hash("flag",emptystate)
</code></pre>

<p>by executing the script we have the following HMAC:</p>

<pre><code>$ python weshgrow-sol.py                                                                                                                                                                      
3f6933240ae234edddc27544d949238c  
</code></pre>

<p>by opening the following url we have the flag:</p>

<blockquote><p>/flag?hmac=3f6933240ae234edddc27544d949238c</p>

<p>FLAG ? FLAG !
Can_I_haz_s3cureD_hm4c_plz?</p></blockquote>

<p>PS: There is a solution as PDF file for <code>Persian</code> Users too which can be obtained from <a href="/files/ctf/ndh2k15/weshgrow/weshgrow-sol-fa.pdf">here</a>.</p>

<p>by <code>f02</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Facesec Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-facesec-writeup/"/>
    <updated>2015-04-06T01:56:25+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-facesec-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Facesec Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Web</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>&ldquo;Hello there,</p>

<p>We are looking for a developer or security consultant to secure our filebox system. We stumbled upon your LinkedIn profile and it seems like you would be a perfect candidate for this job. Could you please send us your CV and Motivation letter?<br/>
Thanks,</p>

<p><a href="http://facesec.challs.nuitduhack.com/">http://facesec.challs.nuitduhack.com/</a></p></blockquote>

<p>after you open the link , you can see a login/register system.so sign up and login to my account</p>

<p>after that you seen a upload form with this description :</p>

<blockquote><p>You can upload a .txt file if you specify the type of the content (cv or motivation letter).
If you want, you can upload a tar archive which contains two files (cv.txt and motiv.txt).
The content will be update in your profil we can examine your instance.</p></blockquote>

<p>so try to upload your file , contents of 2 texts go to 2 field in your profile name as CV and Motivation Letter</p>

<!--more-->


<p>if you try to upload file with extension you got an error</p>

<p>you can .tar file.<br/>
according to this link you can execute command with tar file :</p>

<p><a href="http://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt">Tar file command execution</a><br/>
so we try to Symlink /etc/passwd to CV.txt</p>

<p>when upload complete and we go to the profile link we can see this :</p>

<pre><code>root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/bin/sh man:x:6:12:man:/var/cache/man:/bin/sh lp:x:7:7:lp:/var/spool/lpd:/bin/sh mail:x:8:8:mail:/var/mail:/bin/sh news:x:9:9:news:/var/spool/news:/bin/sh uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh proxy:x:13:13:proxy:/bin:/bin/sh www-data:x:33:33:www-data:/var/www:/bin/sh backup:x:34:34:backup:/var/backups:/bin/sh list:x:38:38:Mailing List Manager:/var/list:/bin/sh irc:x:39:39:ircd:/var/run/ircd:/bin/sh gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh nobody:x:65534:65534:nobody:/nonexistent:/bin/sh libuuid:x:100:101::/var/lib/libuuid:/bin/sh sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin facesec:x:1000:1000:W00tSymL1nkAttackStillW0rksIn2k15:/home/facesec:/bin/sh 
</code></pre>

<p>Bingo :D</p>

<p>Flag is : W00tSymL1nkAttackStillW0rksIn2k15</p>

<p>WriteUp By Fr0nk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Cooper Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup/"/>
    <updated>2015-04-06T01:52:15+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Cooper Writeup</strong><br/>
<strong>Point = 300</strong><br/>
<strong>Category = Stegano</strong></p>

<blockquote><p>&ldquo;I am not crazy, my mother had me tested.&rdquo; (Sheldon)</p>

<p>What did Sheldon &hellip; huh sorry, Dr. Cooper really mean?
(<a href="http://quals.nuitduhack.com/challenges/view/14">http://quals.nuitduhack.com/challenges/view/14</a>)</p></blockquote>

<p>The tar zip contains a Windows executable, so the first thing I did was opening it in CFF Explorer.
Doing so I found a picture of Sheldon &hellip; or better say <code>"Dr. Cooper"</code> in resources and a section called .hidden containing a ZIP file.</p>

<p><img src="/files/ctf/ndh2k15/cooper/cooper.bmp" title="khkhkhhhhhh" alt="Sheldon's picture" /></p>

<!--more-->


<p>Within the zip file there was a C++ code project with encrypt and decrypt functions.</p>

<pre><code>&gt; dir Stegano-BMP-master
...
2013-06-21  05:24 PM               533 decrypt.cpp
2015-04-04  12:10 PM    &lt;DIR&gt;          easybmp
2013-06-21  05:24 PM               768 encrypt.cpp
2013-06-21  05:24 PM                28 main.cpp
2013-06-21  05:24 PM               564 Makefile
2013-06-21  05:24 PM               238 README.md
2013-06-21  05:24 PM             2,705 stegano.cpp
2013-06-21  05:24 PM               196 stegano.h
               7 File(s)          5,032 bytes
</code></pre>

<p> First thing that strikes the mind is to compile the project and decrypt (extract) the flag from it, and I did, and I FAILED :(</p>

<pre><code class="`"> &gt;decrypt cooper.bmp
 3
</code></pre>

<p> Obviously <code>3</code> cannot be the flag! (but I did submit it and the server did reject it :))
 So I insepected the files more, and I found a <a href="/pdfFile.pdf">PDF</a> file in the EXE&rsquo;s hex dump.
 I fixed and opened it and finally found &ldquo;my precious&rdquo;!</p>

<p> <img src="/files/ctf/ndh2k15/cooper/flag.jpg" title="StephenHawkingSpentSomeTimeOnSteganoTrolling" alt="tha flag" /></p>

<p>BTW: The <a href="/files/ctf/ndh2k15/cooper/pdfFile.pdf">PDF</a> is password protected which the reader has to guess :D</p>

<p> Written by <strong><a href="http://twitter.com/shabgrd">MMS</a></strong></p>
]]></content>
  </entry>
  
</feed>
