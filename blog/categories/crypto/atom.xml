<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Crypto | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/crypto/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-06T01:54:30+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Updator Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup/"/>
    <updated>2015-04-05T03:28:56+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Updator Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Unhackable : &ldquo;Not hackable; that cannot be hacked or broken into.&rdquo;
We manage updates and thus have fixes, this is not a PS3 as it is unhackable &hellip; or is it?
Score     200
Link      <a href="http://updator.challs.nuitduhack.com/">http://updator.challs.nuitduhack.com/</a></p></blockquote>

<p>openning the url gives us a login page and a update button. pressing update button shows an notification:</p>

<blockquote><p>The update managing system is still under construction but will be available soon.</p></blockquote>

<p>We noticed it&rsquo;s a python script <code>update.py</code>. So attempting to loading <code>update.pyc</code> gave us the permission to download the file. Instantly i tried to decompile the code with <code>uncompyle2</code> as:</p>

<!--more-->


<pre><code>$ /usr/local/bin/uncompyle2 update.pyc &gt; update.py
$ cat update.py
# 2015.04.05 03:00:11 IRDT
# Embedded file name: update.py
import config
import sys
KEY = config.KEY

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


class Crypto:

    @staticmethod
    def encrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        content = content.ljust(len(content) + (8 - len(content) % 8), '0')
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('%s.encrypted' % file, 'w') as fd:
            encrypted = []
            for i in range(len(blocks)):
                if i == 0:
                    encrypted.append(xor(KEY, blocks[i]))
                else:
                    encrypted.append(xor(KEY, blocks[i], encrypted[i - 1]))

            fd.write(''.join(encrypted))

    @staticmethod
    def decrypt(file):
        with open(file, 'r') as fd:
            content = fd.read()
        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
        with open('.'.join(file.split('.')[:-1]), 'w') as fd:
            plain = []
            for i in range(len(blocks)):
                if i == 0:
                    plain.append(xor(KEY, blocks[i]))
                else:
                    plain.append(xor(KEY, blocks[i], blocks[i - 1]))

            fd.write(''.join(plain).rstrip('0'))


print 'Content-Type: text/html'
print '\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;Updator - Update system&lt;/title&gt;\n    &lt;link rel="stylesheet" href="static/font-awesome/css/font-awesome.css"&gt;\n    &lt;link rel="stylesheet" href="static/css/style.css"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id="info"&gt;\n      The update managing system is still under construction but will be available soon.\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n'
# okay decompyling update.pyc 
# decompiled 1 files: 1 okay, 0 failed, 0 verify failed
# 2015.04.05 03:00:11 IRDT
</code></pre>

<p>This a simple CBC mode XOR encryption. In the meantime my friend figured out that <code>robots.txt</code> tells us we should take look at <code>/temp/</code> directory. there was a file named <code>log.py.encrypted</code>:</p>

<blockquote><p>Index of /temp
[ICO]  Name    Last modified   Size    Description<br/>
[DIR]  Parent Directory        - <br/>
[TXT]  log.py.encrypted    31-Mar-2015 17:35   328      <br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>As we saw in the decompiled source the encrypt function encrypts a file and saves as <code>name+.encrypted</code>. So we tried to decrypt the file as my friend did. with this assumption that the first block has <code>import</code> keyword he xor the first block with that and take a some chars for the <code>KEY</code>. remember the CBC mode:
<img src="http://upload.wikimedia.org/wikipedia/commons/8/80/CBC_encryption.svg"/><br/>
We have second block if we calculate <code>encrypted[0] ^ encrypted[1]</code>. So he xored the calculated block and the key he take from the previous part. and there was <code>atetime</code>. So after completing the key we can decrypt the file. ( ofcourse it is not a proper solution as you can use xortool and &hellip; but faster than everything :) thanks to him ;) ). So i managed to decrypt the file using edited above source:</p>

<pre><code>import sys
KEY = '6[@dq"&amp;s'

def xor(*args):
    if len(args) &lt; 2:
        sys.exit(0)
    length = len(args[0])
    for arg in args:
        if len(arg) != length:
            sys.exit(0)
        length = len(arg)

    cipher = args[0]
    for arg in args[1:]:
        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])

    return cipher


def decrypt(file):
    with open(file, 'rb') as fd:
        content = fd.read()
    blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
    with open('.'.join(file.split('.')[:-1]), 'w') as fd:
        plain = []
        for i in range(len(blocks)):
            if i == 0:
                plain.append(xor(KEY, blocks[i]))
            else:
                plain.append(xor(KEY, blocks[i], blocks[i - 1]))

        fd.write(''.join(plain).rstrip('0'))


decrypt('log.py.encrypted')
</code></pre>

<p>make sure you use <code>rb</code> to decrypt properly. We have decrypted file as:</p>

<pre><code>import datetime

LOG_DIR = 'logs'

class Logger():

    @staticmethod
    def log(username, password):
        basename = '%s/%s_%s' % (LOG_DIR, str(datetime.date.today()), username)
        with open(basename, 'a+') as fd:
            fd.write('[%s] Login with password %s\n' % (str(datetime.datetime.today()), password))
</code></pre>

<p>there is another directory we should take a look <code>logs</code> no permission:</p>

<blockquote><p>Forbidden<br/>
You don&rsquo;t have permission to access /logs/ on this server.<br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>but reading carefully the code gave me the idea to find the exact location:</p>

<pre><code class="python">&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.date.today())
'2015-04-04'
&gt;&gt;&gt; print "%s/%s_%s" %("logs", str(datetime.date.today()), "admin")
logs/2015-04-04_admin
&gt;&gt;&gt; 
</code></pre>

<p>opening <code>http://updator.challs.nuitduhack.com/logs/2015-04-04_admin</code> gave me this log:</p>

<blockquote><p>[2015-04-04 18:49:48.839448] Login with password Mpt2P4sse2Ouf
[2015-04-04 18:49:54.044382] Login with password Mot2P4sse2Ouf</p></blockquote>

<p>Second password worked for me and after logging in we have the flag:</p>

<blockquote><p>Well played, here is your flag : zEpbiUFt5p7m84cxOxN6</p></blockquote>

<p>Interesting challenge So we&rsquo;ve got 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
